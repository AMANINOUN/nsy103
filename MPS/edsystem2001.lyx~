#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\bullet 0 1 1 -1
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Title
Méthodologie de programmation système
\newline
Support pour les ED 
\newline
Complément de cours
\end_layout

\begin_layout Author
Pascal Farès 
\newline
ISAE 2003
\newline

\begin_inset Foot
status collapsed

\begin_layout Standard
Centre associé CNAM de Beyrouth (Liban)
\end_layout

\end_inset

 
\end_layout

\begin_layout Date
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ce document contient le matériel nécessaire pour les ED système.
 Il rappel ou décrit toutes les notions et concepts nécessaires pour la
 réalisation de petites applications utilisant les concepts liés aux systèmes
 multi-utilisateurs et multi-tâche (processus, thread, sémaphores, signaux,
 E/S,...).
 Nous y faisons une brève introduction au langage C dans ses aspects 
\begin_inset Quotes eld
\end_inset

programmation système
\begin_inset Quotes erd
\end_inset

; de même que sont présent un ensemble d'outils utilisé dans le cadre de
 réalisation d'applications dans l'environnement UNIX( particulièrement
 Linux noyau > 2.2) tel que : Makefile, automake, les package RPM, le script
 shell et PERL,...
\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Part
Les systèmes Unix, panorama
\end_layout

\begin_layout Chapter
Présentation d'Unix
\end_layout

\begin_layout Standard
\begin_inset Include \input{CH1.lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter
Les commandes de base
\end_layout

\begin_layout Standard
\begin_inset Include \input{ch2.lyx}
preview false

\end_inset


\end_layout

\begin_layout Part
Développement d'application Linux
\end_layout

\begin_layout Chapter
Le langage C
\end_layout

\begin_layout Standard
\begin_inset Include \input{langc.lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter
Les outils de développement
\end_layout

\begin_layout Section
Les editeurs
\end_layout

\begin_layout Subsection
VI et gvim
\end_layout

\begin_layout Standard
\begin_inset Include \input{Vim-HOWTO.lyx}
preview false

\end_inset


\end_layout

\begin_layout Subsection
xemacs et emacs
\end_layout

\begin_layout Standard
Il existe deux versions d'emacs la version X windows et la version alphanumériqu
e
\end_layout

\begin_layout Standard
\begin_inset Include \input{emacs.lyx}
preview false

\end_inset


\end_layout

\begin_layout Section
Le Makefile
\end_layout

\begin_layout Standard
make - utilitaire GNU make pour maintenir des groupes de programmes
\end_layout

\begin_layout Standard
make [ -f makefile ] [ option ] ...
 target ...
 
\end_layout

\begin_layout Standard
Le but de l'utilitaire makee est de déterminer automatiquement quelles parties
 d'un gros programme ont besoin d'être recompilées, et exécute les commandes
 nécessaires pour les recompiler.
 Le manuel décrit l'implémentation GNU de make, qui a été écrite par Richard
 Stallman et Roland McGrath.
 Nos exemples montrent des programmes C, puisqu'ils sont les plus courants,
 mais vous pouvez utiliser make avec n'importe quel langage de programmation
 dont le compilateur peut être lancé en tant que commande shell.
 En fait, make n'est pas limité aux seuls pro- grammes.
 Vous pouvez l'utiliser pour décrire n'importe quelle tâche dans laquelle
 certains fichiers doivent être mis à jour automatiquement à partir d'autres
 fichiers quand ceux-ci sont modifiés.
\end_layout

\begin_layout Standard
Avant d'utiliser make, vous devez écrire un fichier appelé makefile qui
 décrit les relations entre les fichiers de votre programme, et qui fournit
 les commandes nécessaires à la mise à jour de chaque fichier.
 Dans un programme, le fichier exécutable sera typiquement mis à jour à
 partir de fichiers objets, qui sont eux-mêmes créés en compilant des fichiers
 sources.
\end_layout

\begin_layout Standard
Quand un fichier makefile adéquat existe, chaque fois que vous modi- fierez
 certains fichiers sources, cette simple commande shell : 
\end_layout

\begin_layout Standard
make
\end_layout

\begin_layout Standard
suffira pour effectuer toutes les recompilations nécessaires.
 Le pro- gramme make utilise la base de données du makefile et les dates
 de dernière modification des fichiers pour décider quels fichiers doivent
 être mis à jour.
 Pour chacun de ces fichiers, il exécute les commandes enregistrées dans
 la base de données.
\end_layout

\begin_layout Standard
make exécute les commandes du makefile pour mettre à jour un ou plusieurs
 _n_o_m_s de cibles, où _n_o_m est typiquement un programme.
 Si aucune option --f n'est présente, make recherchera les makefiles GNU_makefil
e, make_f_i_l_e, dans cet ordre.
\end_layout

\begin_layout Standard
Normalement, vous devriez nommer votre makefile en makefile ou make-file.
 (Nous recommandons Makefile car il apparaît de façon bien visible près
 du début du listing d'un répertoire, juste à côté d'autres fichiers importants
 comme README) Le premier nom recherché,GNUmakefile, n'est pas recommandé
 pour la plupart des makefiles.
 Vous ne devriez utiliser ce nom que si vous avez un makefile qui est spécifique
 au make GNU, et qui ne sera pas compris par d'autres versions de make.
 Si makefile est « - », l'entrée standard est lue.
\end_layout

\begin_layout Standard
make met à jour une cible si elle dépend de fichiers prérequis qui ont été
 modifiés depuis la dernière modification de la cible, ou si la cible n'existe
 pas.
\end_layout

\begin_layout Standard
OPTIONS
\end_layout

\begin_layout Standard
--C rép Se déplacer dans le répertoire rép avant de lire les makefiles ou
 de faire quoi que ce soit d'autre.
 Si de multiples options --C sont spécifiées, chacune d'entre elles est
 interprétée relativement à la précédente : --C / --C etc est équivalent
 à --C /etc.
 Cela est typiquement utilisé lors d'invocations récursives de make.
\end_layout

\begin_layout Standard
--d Afficher des informations de débogage en plus du traitement nor- mal.
 Les informations de débogage indiquent quels fichiers sont évalués pour
 la reconstruction, quels dates de fichiers sont com- parées et avec quels
 résultats, quels fichiers ont réellement besoin d'être recréés, quelles
 règles implicites sont prises en compte et lesquelles sont appliquées --
 bref, tout ce qu'il y a d'intéressant à savoir sur la manière dont make
 décide de ce qu'il a à faire.
\end_layout

\begin_layout Standard
--e Donner la priorité aux variables d'environnement par rapport aux variables
 des makefiles.
\end_layout

\begin_layout Standard
--f ficjeir Utiliser fichier en tant que makefile.
\end_layout

\begin_layout Standard
--i Ignorer toutes les erreurs dans les commandes exécutées pour reconstruire
 les fichiers.
\end_layout

\begin_layout Standard
--I rep Spécifie un répertoire rep où il faut rechercher les makefiles inclus.
 Si plusieurs options --II sont utilisées pour spécifier plusieurs répertoires,
 les répertoires seront parcourus dans l'ordre spécifié.
 À la différence des autres drapeaux de make, les répertoires fournis avec
 les drapeaux --II peuvent venir directement après le drapeau : --II_r_é_p
 est permis, tout comme --II _r_é_p_.
 Cette syntaxe est admise pour assurer la compatibilité avec le drapeau
 --II du préprocesseur C.
\end_layout

\begin_layout Standard
--j _t_r_a_v_a_u_x Spécifie le nombre de travaux (commandes) à exécuter
 simul- tanément.
 S'il y a plus d'une option --jj , seule la dernière sera utilisée.
 Si l'option --jj est fournie sans argument, make ne lim- itera pas le nombre
 de travaux qui peuvent être exécutés simul- tanément.
\end_layout

\begin_layout Standard
--k Continuer autant que possible après une erreur.
 Même si la création de la cible a échoué (et donc celle des cibles qui
 en dépendent), les autres dépendances de ces cibles peuvent être traitées
 de la même façon.
\end_layout

\begin_layout Standard
--l
\end_layout

\begin_layout Standard
--l _c_h_a_r_g_e Spécifier qu'aucun nouveau travail (commande) ne doit être
 com- mencé s'il y a d'autres travaux en cours d'exécution et que la charge
 moyenne est _c_h_a_r_g_e (un nombre en virgule flottante).
 Sans argument, cette option supprime une limite de charge fournie antérieuremen
t.
\end_layout

\begin_layout Standard
--n Afficher les commandes qui doivent être exécutées, mais ne pas les exécuter
 réellement.
\end_layout

\begin_layout Standard
--o _f_i_c_h_i_e_r Ne pas reconstruire le _f_i_c_h_i_e_r même s'il est plus
 ancien que ses dépendances, et ne pas reconstruire quoi que ce soit à cause
 de modifications dans _f_i_c_h_i_e_r.
 Le fichier est essentiellement traité comme étant très âgé et ses règles
 sont ignorées.
\end_layout

\begin_layout Standard
--p Afficher la base de données (règles et valeurs des variables) qui résultent
 de la lecture des makefiles ; ensuite exécuter la com- mande comme elle
 est spécifiée.
 Cela affiche également le numéro de version fourni par l'interrupteur --vv
 (voir en dessous).
 Pour afficher la base de données sans essayer de reconstruire un seul fichier,
 utilisez mmaakkee --pp --f_/_d_e_v_/_n_u_l_l_.
\end_layout

\begin_layout Standard
--q « Mode question ».
 Ne pas lancer de commandes, ni afficher quoi que ce soit, mais uniquement
 renvoyer une valeur de retour qui vaut 0 si les cibles spécifiées sont
 déjà à jour, ou une valeur non nulle sinon.
\end_layout

\begin_layout Standard
--r Interdire l'utilisation des règles implicites intégrées.
 Effacer également la liste des suffixes par défaut pour les règles sur
 les suffixes.
\end_layout

\begin_layout Standard
--s Opération silencieuse ; ne pas afficher les commandes quand elles sont
 exécutées.
\end_layout

\begin_layout Standard
--S Annuler l'effet de l'option --kk ..
 Cela n'est jamais nécessaire sauf pour un make récursif où --k peut être
 hérité à partir du make du plus haut niveau via MAKEFLAGS, ou si vous fournisse
z --kk dans la variable MAKEFLAGS de votre environnement.
\end_layout

\begin_layout Standard
--t « Touch »er les fichiers (les marquer comme étant à jour sans réellement
 les modifier) au lieu d'exécuter leurs commandes.
 Cela est utilisé pour faire croire à make que les commandes ont été exécutées,
 afin de tromper les invocations futures de make.
\end_layout

\begin_layout Standard
--v Afficher le numéro de version de make , un copyright, une liste des
 auteurs et une notice indiquant qu'il n'y a aucune garantie.
\end_layout

\begin_layout Standard
--w Afficher un message contenant le répertoire de travail avant et après
 d'autres traitements.
 Cela peut être utile pour débusquer des erreurs se produisant dans des
 imbrications compliquées de commandes make récursives.
\end_layout

\begin_layout Standard
--W _f_i_c_h_i_e_r Faire croire que le _f_i_c_h_i_e_r cible vient juste
 d'être modifié.
 Quand c'est utilisé avec le drapeau --nn , cela montre ce qui se passerait
 si vous modifiiez ce fichier.
 Sans --nn, c'est presque la même chose que d'exécuter la commande _t_o_u_c_h
 sur le fichier donné avant de lancer make, sauf que la date de modification
 n'est mod- ifiée que dans l'imagination de make.
\end_layout

\begin_layout Standard
\begin_inset Include \input{make.lyx}
preview false

\end_inset


\end_layout

\begin_layout Section
autogen; autoconf; automake
\end_layout

\begin_layout Section
RCS
\end_layout

\begin_layout Standard
\begin_inset Include \input{rcs.lyx}
preview false

\end_inset


\end_layout

\begin_layout Section
CVS
\end_layout

\begin_layout Section
Ecrire des man
\end_layout

\begin_layout Chapter
Le compilateur gcc
\end_layout

\begin_layout Standard
\begin_inset Include \include{gcc.lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter
Notion de librairies
\end_layout

\begin_layout Standard
\begin_inset Include \include{librairies.lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter
L'environnement de développement
\end_layout

\begin_layout Part
Programmation système
\end_layout

\begin_layout Chapter
Les primitives système
\end_layout

\begin_layout Standard
\begin_inset Include \include{primitives..lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter
Le modèle de processus
\end_layout

\begin_layout Standard
\begin_inset Include \input{ipc.lyx}
preview false

\end_inset


\end_layout

\begin_layout Chapter
Introduction au threads Linux
\end_layout

\begin_layout Standard
\begin_inset Include \input{threads.lyx}
preview false

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
appendix
\end_layout

\end_inset


\end_layout

\end_body
\end_document
