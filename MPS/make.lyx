#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass book
\language english
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Subsection

Le Makefile
\layout Subsubsection

Comment marche la compilation 
\layout Standard

*.c  *.h (Fichiers source)                       |                  COMPILATEUR
                       |              *.o (Fichier objet)               
       |     Librairies -->  LIEUR <-- Fichiers objet                  
     |              Fichier executable   
\layout Subsubsection

Compilation séparée 
\layout Paragraph

Utilité 
\layout Standard

L'utilité est triple: 
\layout Itemize

La programmation est modulaire, donc plus compréhensible 
\layout Itemize

La séparation en plusieurs fichiers produit des listings plus lisibles 
\layout Itemize

La maintenance est plus facile car seule une partie du code est recompilée
 
\layout Paragraph

Ce que fait make 
\layout Itemize

make assure la compilation séparée grâce à 
\family typewriter 
gcc
\family default 
 
\layout Itemize

make utilise des macro-commandes et des variables 
\layout Itemize

make permet de ne recompiler que le code modifié 
\layout Itemize

make permet d'utiliser des commandes shell, et ainsi d'effectuer une installatio
n 
\layout Standard

Make est essentiel lorsque l'on veut effectuer un portage, car la plupart
 des logiciels libres UNIX (c'est-à-dire des logiciels qui  sont fournis
 avec le code source) l'utilisent pour leur installation.
 
\layout Subsubsection


\family typewriter 
Makefile
\family default 
 ? 
\layout Standard

Le fichier 
\family typewriter 
Makefile
\family default 
 est un fichier nécessaire à make.
 Un fichier 
\family typewriter 
Makefile
\family default 
 indique à make comment exécuter les instructions nécessaires à l'installation
 d'un logiciel ou d'une librairie.
 
\layout Standard

Le fichier 
\family typewriter 
Makefile
\family default 
 doit se trouver dans le répertoire courant lorsqu'on appelle make à l'invite
 du shell.
  
\layout Standard

Les instructions contenues dans un fichier 
\family typewriter 
Makefile
\family default 
 obéissent à une syntaxe particulière un peu stupide.
 
\layout Subsection

Règles 
\layout Standard

Les fichiers 
\family typewriter 
Makefile
\family default 
 sont structurés grâce aux règles.
 Ce sont elles qui définissent ce qui doit être exécuté ou non, et qui permetten
t de compiler un programme de différentes façons.
 
\layout Subsubsection

Qu'est-ce qu'une règle ? 
\layout Standard

Une règle est une suite d'instructions qui seront exécutées pour construire
 une cible, mais uniquement si des dépendances  sont plus récentes.
 
\layout Standard

\layout Standard

La syntaxe d'une règle est la suivante: 
\layout LyX-Code

cible: dependances         
\layout LyX-Code

    commandes         ...
  
\layout Subsubsection

Cible 
\layout Standard

La cible est généralement le nom d'un fichier qui va être généré par les
 commandes qui vont suivre, ou une action gérée par ces mêmes commandes,
 par exemple 
\family typewriter 
clean
\family default 
 ou 
\family typewriter 
install
\family default 
 (Voir chapitre IX [Cibles] pour plus de détails sur les conventions utilisées
 dans l'attribution d'un nom à une règle).
 
\layout Subsubsection

Dépendances 
\layout Standard

Les dépendances sont les fichiers ou les règles nécessaires à la création
 de la cible.
 Par exemple un fichier en-tête ou un fichier source dans le cas d'une compilati
on C.
 Dans le cas d'un fichier, la cible n'est construite que si ce fichier est
 plus récent que la cible.
 
\layout Subsubsection

Commandes 
\layout Standard

C'est une suite de commandes shell qui seront exécutées au moment de la
 création de la cible.
 Une étrangeté de la syntaxe des fichiers 
\family typewriter 
Makefile
\family default 
 oblige l'utilisateur de make à insérer une tabulation au début de chaque
 ligne, faute de quoi make affichera une erreur au moment de son exécution.
 
\layout Standard

La syntaxe de make oblige aussi l'utilisateur à ajouter une caractère "backslash
" (
\family typewriter 
'
\backslash 
 '
\family default 
) à la fin de chaque ligne dès que les commandes à exécuter dépassent une
 ligne de texte.
 
\layout Subsection

Mon premier 
\family typewriter 
Makefile
\family default 
 ! 
\layout Standard

Maintenant que nous connaissons la syntaxe d'un fichier 
\family typewriter 
Makefile
\family default 
, nous allons en créer un pour apprendre à les utiliser.
 
\layout Subsubsection

Fichier exemple 
\family typewriter 
Makefile
\family default 
 
\layout Standard

# Mon premier Makefile 
\layout LyX-Code

main: foobar.o main.o
\layout LyX-Code

    gcc -o main foobar.o main.c 
\layout LyX-Code

foobar.o: foobar.c foobar.h         
\layout LyX-Code

    gcc -c foobar.c -o foobar.o  
\layout Subsubsection

Et maintenant ? 
\layout Standard

Si vous avez enregistré l'exemple ci-dessus dans un fichier 
\family typewriter 
Makefile
\family default 
, il ne nous reste plus qu'a exécuter make dans le même répertoire que celui
 où vous avez enregistré le fichier.
 
\layout Standard

Make s'exécute tout simplement en lançant la commande: 
\layout Standard

$ make main  
\layout Standard

Make va alors interpréter le fichier 
\family typewriter 
Makefile
\family default 
 et exécuter les commandes contenues dans la règle all, une fois que les
 dépendances foobar.o et main.c seront vérifiées.
 
\layout Standard

C'est à dire dire que si 
\family typewriter 
foobar.o
\family default 
 ou 
\family typewriter 
main.c
\family default 
 sont plus récents que le fichier 
\family typewriter 
main
\family default 
, make recompilera 
\family typewriter 
main
\family default 
.
  
\layout Standard

Notez que si j'avais simplement tapé: 
\family typewriter 
"make"
\family default 
 le résultat serait le même car quand make est  exécuté sans argument, make
 exécute la première règle recontrée.
  
\layout Subsection

Macro-commandes et variables 
\layout Standard

Les habitué(e)s de la programmation C ne seront pas dépaysé(e)s par le concept
 des variables de make.
 En fait, il faut plutôt considérer les variables comme des macro-commandes
 (
\family typewriter 
#define
\family default 
 en C).
 
\layout Subsubsection

Déclaration 
\layout Standard

La déclaration se fait tout simplement avec la syntaxe ci-dessous: 
\layout Standard

NOM = VALEUR  Les espaces insérés ici ne sont pas obligatoires, mais facilitent
 la lisibilité du 
\family typewriter 
Makefile
\family default 
.
 La valeur affectée à la variable peut comme pour les macro-commandes du
 C comporter n'importe quels caractères, elle peut aussi être une autre
 variable.
 
\layout Subsubsection

Appel 
\layout Standard

La syntaxe de l'appel de la macro-commande est la suivante: 
\layout Standard

$(NOM)  
\layout Subsubsection

Exemple 
\layout Standard

prefix = /usr/local  
\newline 
bindir = $(prefix)/bin 
\layout Subsection

Un 
\family typewriter 
Makefile
\family default 
 un peu plus complexe et commenté 
\layout LyX-Code

# $(BIN) est la nom du binaire généré 
\layout LyX-Code

BIN = foo 
\layout LyX-Code

# $(OBJECTS) sont les objets qui seront générés après la compilation 
\layout LyX-Code

OBJECTS = main.o foo.o 
\layout LyX-Code

# $(CC) est le compilateur utilisé 
\layout LyX-Code

CC = gcc 
\layout LyX-Code

# all est la première règle à être exécutée car elle est la première 
\layout LyX-Code

# dans le fichier Makefile.
 Notons que les dépendances peuvent être  
\layout LyX-Code

# remplacées par une variable, ainsi que n'importe quel chaine de 
\layout LyX-Code

# caractères des commandes 
\layout LyX-Code

$(BIN): $(OBJECTS)         
\layout LyX-Code

  $(CC) $(OBJECTS) -o $(BIN) 
\layout LyX-Code

# ensuite les autres règles 
\layout LyX-Code

main.o: main.c main.h         
\layout LyX-Code

    $(CC) -c mainc 
\layout LyX-Code

foo.o: foo.c foo.h main.h         
\layout LyX-Code

    $(CC) -c foo.c  
\layout Subsection

Caractères jokers 
\layout Standard

Les caractères jokers s'utilisent comme sous shell.
 Les caractères valides sont 
\family typewriter 
* ? [...]
\family default 
.
 Par exemple, 
\family typewriter 
toto?.c
\family default 
 représente tous les fichiers commençant par 
\family typewriter 
toto
\family default 
, finissant par 
\family typewriter 
.c
\family default 
, avec une lettre entre ces deux chaînes.
 
\layout Standard

Comme sous shell, le caractère '
\family typewriter 

\backslash 
 
\family default 
' permet d'inhiber l'action des caractères jokers.
 Par exemple 
\family typewriter 
's
\backslash 
 *r.c'
\family default 
 fait référence à 
\family typewriter 
st*r.c
\family default 
 et non pas à tous les fichiers commençant par 
\family typewriter 
st
\family default 
 et finissant par 
\family typewriter 
r.c
\family default 
.
 
\layout Standard

Exemples: 
\layout LyX-Code


\size footnotesize 
clean:         
\layout LyX-Code


\size footnotesize 
# ici le caractère joker * est géré par le shell et non pas         
\layout LyX-Code


\size footnotesize 
# par make         
\layout LyX-Code


\size footnotesize 
    rm -f *.o print: *.c         
\layout LyX-Code


\size footnotesize 
# le $? est une variable automatique (Voir chapitre VII         
\layout LyX-Code


\size footnotesize 
# [Patterns et variables automatiques])         
\layout LyX-Code


\size footnotesize 
   lpr -Php $?  
\layout Subsection

Patterns et variables automatiques 
\layout Subsubsection

Pattern 
\layout Standard

Un pattern s'utilise un peu comme un caractère joker, mais uniquement dans
 le cas des cibles.
 Le caractère faisant office de joker est  le caractère pourcent ('
\family typewriter 
%
\family default 
').
 
\layout Standard

L'intérêt est d'avoir plusieurs cibles.
 Les patterns permettent de filtrer les cibles pour savoir pour lesquelles
 d'entre elles les commandes qui suivent seront exécutées.
 
\layout Subsubsection

Exemple idiot 
\layout Standard

Pourquoi cet exemple est-il idiot ? Tout simplement parcequ'on met pèle-mêle
 tous les fichiers à compiler dans la même variable 
\family typewriter 
OBJECTS
\family default 
.
 Le plus simple aurait été d'utiliser plusieurs variables et de faire des
 règles différentes pour chaque type de compilation (normale, x11, athena).
 
\layout LyX-Code


\size footnotesize 
# Notons que les objets sont à la fois des fichiers objets à lier et 
\layout LyX-Code


\size footnotesize 
# des exécutables à compiler 
\layout LyX-Code


\size footnotesize 
OBJECTS = text/main.o text/foo.o x11/main x11/bar athena/main 
\layout LyX-Code


\size footnotesize 
# Le compilateur est bien sûr gcc 
\layout LyX-Code


\size footnotesize 
CC = gcc 
\layout LyX-Code


\size footnotesize 
# Les dépendances sont tous les objets 
\layout LyX-Code


\size footnotesize 
all: $(OBJECTS)         
\layout LyX-Code


\size footnotesize 
    # On va quand même faire quelque chose dans cette règle         
\layout LyX-Code


\size footnotesize 
    echo DONE 
\layout LyX-Code


\size footnotesize 
# Ici les règles pour tous les fichiers .o se trouvant dans le 
\layout LyX-Code


\size footnotesize 
# répertoire 'text' 
\layout LyX-Code


\size footnotesize 
text/%.o: text/%.c         
\layout LyX-Code


\size footnotesize 
    $(CC) -c text/$*.c 
\layout LyX-Code


\size footnotesize 
# Ici les règles pour tous les fichiers se trouvant dans le répertoire 
\layout LyX-Code


\size footnotesize 
# 'x11' 
\layout LyX-Code


\size footnotesize 
x11/%: x11/%.c         
\layout LyX-Code


\size footnotesize 
    $(CC) -lX11 x11/$*.c 
\layout LyX-Code


\size footnotesize 
# Ici les règles pour les fichiers se trouvant dans le répertoire 
\layout LyX-Code


\size footnotesize 
# 'athena'  
\layout LyX-Code


\size footnotesize 
athena/%: athena/%.c         
\layout LyX-Code


\size footnotesize 
    $(CC) -lXaw -lXext -lXmu -lXt -lX11 athena/$*.c
\size default 
  
\layout Subsubsection

Liste des variables automatiques 
\layout Standard

Les variables automatiques sont des variables qui sont actualisées au moment
 de l'exécution de chaque règle, en fonction de la cible et des dépendances.
 
\layout Itemize


\family typewriter 
$@
\family default 
: nom de la cible 
\layout Itemize


\family typewriter 
$<
\family default 
: première dépendance de la liste des dépendances 
\layout Itemize


\family typewriter 
$?
\family default 
: les dépendances plus récentes que la cible 
\layout Itemize


\family typewriter 
$^
\family default 
: toutes les dépendances 
\layout Itemize


\family typewriter 
$*
\family default 
: dans le cas de l'utilisation des patterns, la chaine correspondant au
 
\family typewriter 
%
\family default 
 
\layout Subsection

Conventions d'appellation 
\layout Subsubsection

Noms d'exécutables et d'arguments 
\layout Standard

Entre parenthèses les valeurs par défaut 
\layout Itemize

AR: programme de maintenance d'archive (ar) 
\layout Itemize

CC: compilateur C (cc) 
\layout Itemize

CXX: compilateur C++ (c++) 
\layout Itemize

RM: commande pour effacer un fichier (rm) 
\layout Itemize

TEX: programme pour créer un fichier TeX dvi à partir d'un source TeX (tex)
 
\layout Itemize

ARFLAGS:  paramètres à passer au programme de maintenance d'archives ()
 
\layout Itemize

CFLAGS: paramètres à passer au compilateur C () 
\layout Itemize

CXXFLAGS: paramètres à passer au compilateur C++ () 
\layout Subsubsection

Noms de répertoires de destination 
\layout Standard

Entre parenthèses les valeurs usuelles 
\layout Itemize

prefix: racine du répertoire d'installation (
\family typewriter 
/usr/local
\family default 
) 
\layout Itemize

exec_prefix: racine pour les binaires (
\family typewriter 
$(prefix)
\family default 
) 
\layout Itemize

bindir: répertoire d'installation des binaires (
\family typewriter 
$(exec_prefix)/bin
\family default 
) 
\layout Itemize

libdir: répertoire d'installation des librairies (
\family typewriter 
$(exec_prefix)/lib
\family default 
) 
\layout Itemize

datadir: répertoire d'installation des données statiques pour le programme
 (
\family typewriter 
$(exec_prefix)/lib
\family default 
) 
\layout Itemize

statedir: répertoire d'installation des données modifiables par le programme
 (
\family typewriter 
$(prefix)/lib
\family default 
) 
\layout Itemize

includedir: répertoire d'installation des en-têtes (
\family typewriter 
$(prefix)/include
\family default 
) 
\layout Itemize

mandir: répertoire d'installation des fichiers de manuel (
\family typewriter 
$(prefix)/man
\family default 
) 
\layout Itemize

manxdir: répertoire d'installation des fichiers de la section x du manuel
 (
\family typewriter 
$(prefix)/manx
\family default 
) 
\layout Itemize

infodir: répertoire d'installation des fichiers info (
\family typewriter 
$(prefix)/info
\family default 
) 
\layout Itemize

srcdir: répertoire d'installation des fichiers source (
\family typewriter 
$(prefix)/src
\family default 
) 
\layout Subsubsection

Noms de cibles 
\layout Standard

Un utilisateur de make peut donner à ses cibles le nom qu'il désire.
 Mais pour des raisons de lisibilité, on donne toujours un nom standard
 à ses cibles selon leur comportement.
 
\layout Standard

Quelques exemples de cibles standard: 
\layout Itemize


\family typewriter 
all
\family default 
: compile tous les fichiers source pour créer l'exécutable principal 
\layout Itemize


\family typewriter 
install
\family default 
: exécute all, et copie l'exécutable, les librairies, les datas, et les
 fichiers en-tête s'il y en a dans les répertoires de destination 
\layout Itemize


\family typewriter 
uninstall
\family default 
: détruit les fichiers créés lors de l'installation, mais pas les fichiers
 du répertoire d'installation (où se trouvent les fichiers source et le
 
\family typewriter 
Makefile
\family default 
) 
\layout Itemize


\family typewriter 
clean
\family default 
: détruit tout les fichiers créés par all 
\layout Itemize


\family typewriter 
info
\family default 
: génère un fichier info 
\layout Itemize


\family typewriter 
dvi
\family default 
: génère un fichier dvi 
\layout Itemize


\family typewriter 
dist
\family default 
: crée un fichier tar de distribution 
\the_end
