#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\bullet 0 0 1 5
\bullet 2 0 1 -1
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section
GCC
\end_layout

\begin_layout Subsection
gcc, g++ - Compilateurs C et C++ du projet GNU (egcs-1.1.2).
\end_layout

\begin_layout Description
SYNOPSIS gcc [ option | fichier ]...
 g++ [ option | fichier ]...
\end_layout

\begin_layout Description
AVERTISSEMENT L'information contenue dans cette page de manuel constitue
 un extrait de la documentation complète du compilateur GNU C, et est limitée
 à la signification des options.
\end_layout

\begin_layout Standard
Cette page de manuel n'est pas tenue à jour à moins que des volontaires
 ne veuillent la maintenir.
 Si vous trou­ vez une contradiction entre la page de manuel et le programme,
 reportez-vous au fichier Info 
\begin_inset Quotes eld
\end_inset


\family typewriter
info gcc
\begin_inset Quotes erd
\end_inset


\family default
 qui constitue la documentation de référence.
\end_layout

\begin_layout Description
DESCRIPTION Les compilateurs C et C++ sont intégrés.
 Les deux traitent les fichiers en entrée en suivant de une à quatre étapes
 : prétraitement, compilation, assemblage, et édition des liens.
 Les suffixes des noms de fichiers sources identifient le langage source,
 mais quel que soit le nom utilisé, le compilateur suppose par défaut que
 :
\end_layout

\begin_layout Standard
gcc suppose que les fichiers prétraités (.i) sont en C et que l'édition des
 liens se fait comme en C.
\end_layout

\begin_layout Standard
g++ suppose que les fichiers prétraités (.i) sont en C++ et que l'édition
 des liens se fait comme en C++.
\end_layout

\begin_layout Standard
Les suffixes des noms de fichiers sources indiquent le langage utilisé et
 le type de traitement à effectuer :
\end_layout

\begin_layout Standard
.c source C; prétraiter, compiler, assembler .C source C++; prétraiter, compiler,
 assembler .cc source C++; prétraiter, compiler, assembler .cxx source C++;
 prétraiter, compiler, assembler .m source Objective-C; prétraiter, compiler,
 assembler .i C prétraité; compiler, assembler .ii C++ prétraité; compiler,
 assembler .s source assembleur; assembler .S source assembleur; prétraiter,
 assembler .h fichier prétraité; rarement utilisé en ligne de commandes
\end_layout

\begin_layout Standard
Les fichiers avec d'autres suffixes sont passés à l'éditeur de liens.
 Les cas habituels incluent :
\end_layout

\begin_layout Description
.o Fichier objet 
\end_layout

\begin_layout Description
.a Fichier archive
\end_layout

\begin_layout Standard
L'édition des liens est toujours la dernière étape à moins d'utiliser les
 options -c, -S, ou -E pour l'éviter (ou à moins que des erreurs de compilations
 n'interrompent le traitement en entier).
 Lors de l'étape d'édition des liens, tous les fichiers .o correspondant
 aux fichiers sources, les librairies -l , les noms de fichiers not reconnus
 (y compris les fichiers objets .o et les fichiers archives .a ) sont passés
 à l'éditeur de liens dans l'ordre de la ligne de commandes.
\end_layout

\begin_layout Description
OPTIONS Les options doivent être séparées : `-dr' est très différent de
 `-d -r '.
\end_layout

\begin_layout Standard
La plupart des options `-f' et `-W' ont deux formes opposées : -fname and
 -fno-name (ou -Wname and -Wno-name).
 Seules les formes qui ne sont pas utilisées par défaut seront montrées
 ici.
\end_layout

\begin_layout Standard
Voici un résumé de toutes les options, groupées par type.
 Les explications suivent dans les prochaines sections.
\end_layout

\begin_layout Standard
Options Globales -c -S -E -o fichier-pipe -v -x langage
\end_layout

\begin_layout Standard
Options de Langage -ansi -fall-virtual -fcond-mismatch -fdollars-in-identifiers
 -fenum-int-equiv -fexternal-templates -fno-asm -fno-builtin -fhosted -fno-hoste
d -ffreestanding -fno-freestanding -fno-strict-prototype -fsigned-bitfields
 -fsigned-char -fthis-is-variable -funsigned-bitfields -funsigned-char -fwritabl
e-strings -traditional -traditional-cpp -trigraphs
\end_layout

\begin_layout Standard
Options d'Avertissement -fsyntax-only -pedantic -pedantic-errors -w -W -Wall
 -Waggregate-return -Wcast-align -Wcast-qual -Wchar-subscript -Wcomment
 -Wconversion -Wenum-clash -Werror -Wformat -Wid-clash-longueur -Wimplicit
 -Wimplicit-int -Wimplicit-function-declaration -Winline -Wlong-long -Wmain
 -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Wno-import
 -Wparentheses -Wpointer-arith -Wredundant-decls -Wreturn-type -Wshadow
 -Wstrict-prototypes -Wswitch -Wtemplate-debugging -Wtraditional -Wtrigraphs
 -Wuninitialized -Wunused -Wwrite-strings
\end_layout

\begin_layout Standard
Options de Déboggage -a -dlettres -fpretend-float -g -gniveau -gcoff -gxcoff
 -gxcoff+ -gdwarf -gdwarf+ -gstabs -gstabs+ -ggdb -p -pg -save-temps -print-file
-name=librairie -print-libgcc-file-name -print-prog-name=programme
\end_layout

\begin_layout Standard
Options d'Optimisation -fcaller-saves -fcse-follow-jumps -fcse-skip-blocks
 -fdelayed-branch -felide-constructors -fexpensive-optimizations -ffast-math
 -ffloat-store -fforce-addr -fforce-mem -finline-functions -fkeep-inline-functio
ns -fmemoize-lookups -fno-default-inline -fno-defer-pop -fno-function-cse
 -fno-inline -fno-peephole -fomit-frame-pointer -frerun-cse-after-loop -fschedul
e-insns -fschedule-insns2 -fstrength-reduce -fthread-jumps -funroll-all-loops
 -funroll-loops -O -O2 -O3
\end_layout

\begin_layout Standard
Options du Préprocesseur -Aassertion -C -dD -dM -dN -Dmacro[=defn] -E -H
 -idirafter répertoire -include fichier -imacros fichier -iprefix fichier
 -iwithprefix répertoire -M -MD -MM -MMD -nostdinc -P -Umacro -undef
\end_layout

\begin_layout Standard
Options de l'Assembleur -Wa,option
\end_layout

\begin_layout Standard
Options de l'Editeur de liens -llibrairie -nostartfiles -nostdlib -static
 -shared -symbolic -Xlinker option -Wl,option -u symbole
\end_layout

\begin_layout Standard
Options de Répertoires -Bpréfixe -Irépertoire -I- -Lrépertoire
\end_layout

\begin_layout Standard
Options de Cible -b machine -V version
\end_layout

\begin_layout Standard
Options Dépendantes de la Configuration Options M680x0 -m68000 -m68020 -m68020-4
0 -m68030 -m68040 -m68881 -mbitfield -mc68000 -mc68020 -mfpa -mnobitfield
 -mrtd -mshort -msoft-float
\end_layout

\begin_layout Standard
Options VAX -mg -mgnu -munix
\end_layout

\begin_layout Standard
Options SPARC -mepilogue -mfpu -mhard-float -mno-fpu -mno-epilogue -msoft-float
 -msparclite -mv8 -msupersparc -mcypress
\end_layout

\begin_layout Standard
Options Convex -margcount -mc1 -mc2 -mnoargcount
\end_layout

\begin_layout Standard
Options AMD29K -m29000 -m29050 -mbw -mdw -mkernel-registers -mlarge -mnbw
 -mnodw -msmall -mstack-check -muser-registers
\end_layout

\begin_layout Standard
Options M88K -m88000 -m88100 -m88110 -mbig-pic -mcheck-zero-division -mhandle-la
rge-shift -midentify-revision -mno-check-zero-division -mno-ocs-debug-info
 -mno-ocs-frame-position -mno-optimize-arg-area -mno-serialize-volatile
 -mno-underscores -mocs-debug-info -mocs-frame-position -moptimize-arg-area
 -mserialize-volatile -mshort-data-nombre -msvr3 -msvr4 -mtrap-large-shift
 -muse-div-instruction -mversion-03.00 -mwarn-passed-structs
\end_layout

\begin_layout Standard
Options RS6000 -mfp-in-toc -mno-fop-in-toc
\end_layout

\begin_layout Standard
Options RT -mcall-lib-mul -mfp-arg-in-fpregs -mfp-arg-in-gregs -mfull-fp-blocks
 -mhc-struct-return -min-line-mul -mminimum-fp-blocks -mnohc-struct-return
\end_layout

\begin_layout Standard
Options MIPS -mcpu=type de processeur -mips2 -mips3 -mint64 -mlong64 -mmips-as
 -mgas -mrnames -mno-rnames -mgpopt -mno-gpopt -mstats -mno-stats -mmemcpy
 -mno-memcpy -mno-mips-tfile -mmips-tfile -msoft-float -mhard-float -mabicalls
 -mno-abicalls -mhalf-pic -mno-half-pic -G nombre -nocpp
\end_layout

\begin_layout Standard
Options i386 -m486 -mno-486 -msoft-float -mno-fp-ret-in-387
\end_layout

\begin_layout Standard
Options HPPA -mpa-risc-1-0 -mpa-risc-1-1 -mkernel -mshared-libs -mno-shared-libs
 -mlong-calls -mdisable-fpregs -mdisable-indexing -mtrailing-colon
\end_layout

\begin_layout Standard
Options i960 -mtype_de_processeur -mnumerics -msoft-float -mleaf-procedures
 -mno-leaf-procedures -mtail-call -mno-tail-call -mcomplex-addr -mno-complex-add
r -mcode-align -mno-code-align -mic-compat -mic2.0-compat -mic3.0-compat -masm-com
pat -mintel-asm -mstrict-align -mno-strict-align -mold-align -mno-old-align
\end_layout

\begin_layout Standard
Options DEC Alpha -mfp-regs -mno-fp-regs -mno-soft-float -msoft-float
\end_layout

\begin_layout Standard
Options System V -G -Qy -Qn -YP,chemins -Ym,répertoire
\end_layout

\begin_layout Standard
Options de Géneration de Code -fcall-saved-registre -fcall-used-registre
 -ffixed-registre -finhibit-size-directive -fnonnull-objects -fno-common
 -fno-ident -fno-gnu-linker -fpcc-struct-return -fpic -fPIC -freg-struct-return
 -fshared-data -fshort-enums -fshort-double -fvolatile -fvolatile-global
 -fverbose-asm
\end_layout

\begin_layout Standard
OPTIONS GLOBALES -x langage Spécifie explicitement le langage des fichiers
 d'entrée suivants (plutôt que de choisir un com­ portement par défaut basé
 sur le suffixe du nom du fichier) .
 Cette option s'applique à tous les fichiers d'entrées suivants jusqu'à
 la prochaine option `-x'.
 Les valeurs possibles pour langage sont `c', `objective-c', `c-header',
 `c++', `cpp-output', `assembler', et `assembler-with-cpp'.
\end_layout

\begin_layout Standard
-x none Annule toute spécification d'un langage, de sorte que tous les fichiers
 ultérieurs soient traités en rapport avec leur suffixe de nom de fichier
 (comme si `-x' n'avait jamais été utilisé).
\end_layout

\begin_layout Standard
Si vous ne voulez que quelques unes des étapes (prétraite­ ment, compilation,
 assemblage, édition des liens), vous pouvez utiliser `-x' (ou des suffixes
 de noms de fichiers) pour dire à gcc où commencer, et une des options `-c',
 `-S', ou `-E' pour dire quand gcc doit s'arrêter.
 Notez que certaines combinaisons (par exemple, `-x cpp-output -E') diesnt
 à gcc de ne rien faire du tout.
\end_layout

\begin_layout Standard
-c Compiler ou assembler les fichiers sources, mais ne pas éditer les liens.
 La sortie du compilateur est un fichier objet correspondant à chaque fichier
 source.
\end_layout

\begin_layout Standard
Par défaut, GCC crée le nom du fichier objet à par­ tir d'un fichier source
 en remplaçant les suffixes `.c', `.i', `.s', etc., par `.o'.
 Utilisez -o pour sélectionner un autre nom.
\end_layout

\begin_layout Standard
GCC ignore tous les fichiers d'entrée non reconnus (ceux qui ne requièrent
 pas de compilation ou d'as­ semblage) avec l'option -c.
\end_layout

\begin_layout Standard
-S S'arrêter après l'étape de la compilation proprement dite; ne pas assembler.
 La sortie est un fichier de code assembleur pour chaque fichier d'entrée
 non assembleur spécifié.
\end_layout

\begin_layout Standard
Par défaut, GCC crée le nom du fichier assembleur à partir du fichier source
 en remplaçant le suffixe `.c', `.i', etc., par `.s'.
 Utilisez -o pour sélectionner un autre nom.
\end_layout

\begin_layout Standard
GCC ignore tout fichier d'entrée ne requérant pas de compilation.
\end_layout

\begin_layout Standard
-E S'arrêter après l'étape du prétraitement; ne pas lancer le compilateur
 proprement dit.
 La sortie est un code source prétraité, qui est envoyé vers la sortie standard.
\end_layout

\begin_layout Standard
GCC ignore les fichiers d'entrée ne requérant pas de prétraitement.
\end_layout

\begin_layout Standard
-o fichier Placer la sortie dans le fichier fichier.
 Cela s'applique quel que soit le type de sortie produit par GCC, que ce
 soit un fichier exécutable, un fichier objet, un fichier assembleur ou
 du code C prétraité.
\end_layout

\begin_layout Standard
Puisqu'un seul fichier de sortie peut être spécifié, cela n'a aucun sens
 d'utiliser`-o' quand on compile plus d'un fichier d'entrée, à moins que
 l'on ne veuille produire un fichier exécutable en sortie.
\end_layout

\begin_layout Standard
Si vous ne spécifiez pas `-o', le comportement par défaut est de produire
 un fichier exécutable nommé `a.out', le fichier objet pour `source.suffixe'
 dans `source.o', son fichier assembleur dans `source.s', et tout le code
 source C sur la sortie standard.
\end_layout

\begin_layout Standard
-v Imprimer (sur la sortie d'erreur standard) les com­ mandes exécutées
 pour lancer les étapes de la com­ pilation.
 Imprimer également le numéro de version du programme pilote du compilateur,
 du prépro­ cesseur et du compilateur proprements dits.
\end_layout

\begin_layout Standard
-pipe Utiliser des tubes plutot que des fichiers tempo­ raires pour la communica
tion entre les différentes phases de la compilation.
 Ceci ne marche pas sur certains systèmes où l'assembleur ne peut lire à
 partir d'un tube; mais l'assembleur GNU n'a aucun problème.
\end_layout

\begin_layout Standard
OPTIONS DE LANGAGE Les options suivantes contrôlent le dialecte de C accepté
 par le compilateur :
\end_layout

\begin_layout Standard
-ansi Supporte tous les programmes C au format standard ANSI.
\end_layout

\begin_layout Standard
Ceci désactive certaines caractéristiques du C GNU qui sont incompatibles
 avec le C ANSI, tel que les mots-clés asm, inline et , et les macros prédéfinie
s telles que unix et vax qui identifient le type de système que vous utilisez.
 Il active également la caractéristique rarement utilisée et non souhaitable
 des trigraphes ANSI, et désactive la possibilité d'utiliser `$' dans les
 identifica­ teurs.
\end_layout

\begin_layout Standard
Les mots-clés alternatifs __asm__, __extension__, __inline__ et __typeof__
 continuent à fonctionner malgré `-ansi'.
 Vous ne voudriez naturellemnt pas les utiliser dans des programmes C ANSI,
 mais il est utile de les placer dans des fichiers d'entête qui pourraient
 être inclus dans des compilations faites avec `-ansi'.
 Des macros prédéfinies comme __unix__ et __vax__ sont aussi disponibles,
 avec ou sans `-ansi'.
\end_layout

\begin_layout Standard
L'option `-ansi' ne pousse pas les programmes non ANSI à être rejetés arbitraire
ment.
 Pour cela, `-pedantic' est requis en plus de `-ansi'.
\end_layout

\begin_layout Standard
Le préprocesseur prédéfinit une macro __STRICT_ANSI__ quand vous utilisez
 l'option `-ansi'.
 Certains fichiers d'entête peuvent remarquer cette macro et s'abstenir
 de déclarer certaines fonctions ou de définir certaines macros que le standard
 ANSI n'utilise pas, ceci dans le but de ne pas interférer avec un programme
 pouvant utiliser ces noms pour d'autres choses.
\end_layout

\begin_layout Standard
-fno-asm Ne pas reconnaître asm, inline etc typeof comme des mots-clés.
 Ces noms peuvent alors être utilisés comme identificateurs.
 Vous pouvez utiliser __asm__, __inline__ et __typeof__ à la place.
 `-ansi' implique `-fno-asm'.
\end_layout

\begin_layout Standard
-fno-builtin Ne pas reconnaître les fonctions intégrées qui ne commencent
 pas par deux caractères de soulignement (__).
 Actuellement, les fonctions affectées inclu­ ent _exit, abort, abs, alloca,
 cos, exit, fabs, labs, memcmp, memcpy, sin, sqrt, strcmp, strcpy, et strlen.
\end_layout

\begin_layout Standard
L'option `-ansi' empêche alloca et _exit d'être des fonctions intégrées.
\end_layout

\begin_layout Standard
-fhosted Compiler pour un environnement hôte; ceci implique l'option `-fbuiltin'
 et implique que des déclara­ tions suspicieuses de main feront l'objet
 d'un avertissement.
\end_layout

\begin_layout Standard
-ffreestanding Compiler pour un environnement non attaché; ceci implique
 l'option `-fno-builtin' , et implique que main n'a pas d'exigences particulière
s.
\end_layout

\begin_layout Standard
-fno-strict-prototype Traiter une déclaration de fonction sans arguments
 telle que `int foo ();', que C traiterait comme ne disant rien du nombre
 d'arguments ou de leur types (C++ uniquement).
 Normalement, une telle déclara­ tion en C++ signifie que la fonction foo
 ne prend aucun argument.
\end_layout

\begin_layout Standard
-trigraphs Supporter les trigraphes C ANSI.
 L'option `-ansi' implique `-trigraphs'.
\end_layout

\begin_layout Standard
-traditional Essaie de supporter certains aspects des compila­ teurs C tradition
nels.
 Pour les détails, voyez le manuel GNU C; la liste dupliquée ici a été sup­
 primée afin de ne pas recevoir de réclamations quand elle n'est pas à jour.
\end_layout

\begin_layout Standard
Mais notons une chose sur les programmes C++ uniquement (pas C).
 `-traditional' a un effet sup­ plémentaire en C++ : l'affectation vers
 this est permise.
 Ceci a le même effet que `-fthis-is-variable'.
\end_layout

\begin_layout Standard
-traditional-cpp Essaie de supporter certains aspects des prépro­ cesseurs
 C traditionnels.
 Ceci inclut les points qui mentionnent spécifiquement le préprocesseur,
 mais aucun des autres effets de `-traditional'.
\end_layout

\begin_layout Standard
-fdollars-in-identifiers Permet l'utilisation de `$' dans les identifica­
 teurs (C++ uniquement).
 Vous pouvez également utiliser `-fno-dollars-in-identifiers' pour inter­
 dire explicitement l'usage de `$'.
 (Le C++ GNU au­ torise `$' par défaut sur certains systèmes cibles mais
 pas les autres.)
\end_layout

\begin_layout Standard
-fenum-int-equiv Permet la conversion implicite de int en type énuméré (C++
 uniquement).
 Normalement, C++ GNU permet la conversion d' enum vers int, mais pas l'inverse.
\end_layout

\begin_layout Standard
-fexternal-templates Produire moins de code pour les déclarations de templates,
 en générant seulement une unique copie de chaque fonction template où elle
 est définie (C++ uniquement).
 Pour utiliser cette option avec succès, vous devez également marquer les
 fichier utilisant des templates avec soit `#pragma implementation' (la
 définition), soit `#pragma interface' (déclarations).
\end_layout

\begin_layout Standard
Quand votre code est compilé avec `-fexternal-templates', toutes les instanciati
ons de templates sont externes.
 Vous devez vous ar­ ranger pour que les instanciations nécessaires ap­
 paraîssent dans le fichier d'implémentation; vous pouvez faire cela avec
 un typedef qui référence chaque instanciation nécessaire.
 Réciproquement, quand vous compilez en utilisant l'option par défaut `-fno-exte
rnal-templates', toutes les in­ stanciations de templates sont explicitement
 in­ ternes.
\end_layout

\begin_layout Standard
-fall-virtual Traite tous les fonctions membres possible en tant que fonctions
 virtuelles implicitement.
 Toutes les fonctions membres (excepté les fonctions construc­ teurs et
 les opérateurs de membres new ou delete ) sont traitées comme des fonctions
 virtuelles de la classe où elles apparaîssent.
\end_layout

\begin_layout Standard
Ceci ne signifie pas que tous les appels à ces fonctions membres seront
 faits par l'intermédiaire de la table interne des fonctions virtuelles.
 Sous certaines circonstances, le compilateur peut déter­ miner qu'un appel
 à une fonction virtuelle donnée peut être fait directement; dans ce cas,
 les appels sont directs.
\end_layout

\begin_layout Standard
-fcond-mismatch Autorise les expressions conditionnelles avec de mauvais
 types dans les deuxième et troisième argu­ ments.
 La valeur d'une telle expression est vide (void).
\end_layout

\begin_layout Standard
-fthis-is-variable Permet l'affectation de this (C++ uniquement).
 L'incorporation d'une gestion de l'espace libre définie par l'utilisateur
 en C++ a fait de l'affec­ tation vers `this' un anachronisme.
 Par conséquent, il est par défaut invalide d'affecter vers this à l'intérieur
 d'une fonction d'un membre de classe.
 Néanmoins, pour la compatibilité de­ scendante, vous pouvez le rendre valide
 avec `-fthis-is-variable'.
\end_layout

\begin_layout Standard
-funsigned-char Permet au type char d'être non signé (unsigned), comme unsigned
 char.
\end_layout

\begin_layout Standard
Chaque type de machine à un comportement par défaut sur ce que char devrait
 être.
 C'est soit unsigned char par défaut, soit signed char par défaut.
\end_layout

\begin_layout Standard
Idéalement, un programme portable devrait toujours utiliser signed char
 ou unsigned char quand il dépend du signe d'un objet.
 Mais beaucoup de pro­ grammes ont été écrits pour utiliser des char sim­
 ples et s'attendent à ce qu'ils soient signés, ou à ce qu'il soient non
 signés, ceci dépendant des ma­ chines pour lequelles le programme a été
 écrit.
 Cette option, et son inverse, vous permettent de créer un programme qui
 fonctionne avec le comporte­ ment opposé par défaut.
\end_layout

\begin_layout Standard
Le type char est toujours un type distinct de signed char et unsigned char,
 même si son comporte­ ment est toujours celui d'un de ces deux là.
\end_layout

\begin_layout Standard
-fsigned-char Permet au type char d'être signé, comme signed char.
\end_layout

\begin_layout Standard
Notez que c'est équivalent à `-fno-unsigned-char', qui est la forme négative
 de`-funsigned-char'.
 De même, `-fno-signed-char' est équivalent à `-funsigned-char'.
\end_layout

\begin_layout Standard
-fsigned-bitfields
\end_layout

\begin_layout Standard
-funsigned-bitfields
\end_layout

\begin_layout Standard
-fno-signed-bitfields
\end_layout

\begin_layout Standard
-fno-unsigned-bitfields Ces options contrôlent si un champ-bit (bitfield)
 est signé ou non signé, quand il est déclaré sans qualificateur `signed'
 ou `unsigned' explicite.
 Par défaut, un tel champ-bit d'un bit est signé, parce que c'est logique
 : les types entiers de bases tels que int sont des types signés.
\end_layout

\begin_layout Standard
Néanmoins, quand vous spécifiez `-traditional', les champs-bit sont tous
 non signés de toute façon.
\end_layout

\begin_layout Standard
-fwritable-strings Conserve les constantes de type chaîne de car­ actères
 dans le segment de données accessible en écriture et ne les rend pas uniques.
 C'est dans le but de compatibilité avec d'anciens programmes qui supposent
 qu'ils peuvent écrire dans des constantes de type chaîne de caractères.
 `-traditional' a aussi cet effet.
\end_layout

\begin_layout Standard
Ecrire dans des constantes de type chaîne de car­ actères est une très mauvaise
 idée; Les "con­ stantes" devraient être constantes !
\end_layout

\begin_layout Standard
OPTIONS DU PREPROCESSEUR Ces options contrôlent le préprocesseur C, qui
 est exécuté sur chaque fichier source C avant la compilation réelle.
\end_layout

\begin_layout Standard
Si vous utilisez l'option `-E' , GCC ne fait rien sauf le prétraitement.
 Certaines de ces options n'ont un sens qu'avec `-E' car elles forcent la
 sortie du préprocesseur à être inappropriée pour la compilation réelle.
\end_layout

\begin_layout Standard
-include fichier Traite fichier en entrée avant de traiter le fichier d'entrée
 normal.
 En fait, le contenu de fichier est compilé en premier.
 Toutes les options `-D' et `-U' en ligne de commandes sont toujours traitées
 avant `-include fichier', quel que soit leur ordre d'écriture.
 Toutes les options `-include' and `-imacros' sont traitées dans leur ordre
 d'écriture
\end_layout

\begin_layout Standard
-imacros fichier Traite fichier en entrée, en abandonnant le sortie résultante,
 avant de traiter le fichier d'entrée normal.
 Puisque la sortie générée à partir de file est abandonnée, le seul effet
 de `-imacros fichier' est de rendre les macros définies dans fichier disponible
s pour être utilisées dans l'entrée prin­ cipale.
 Le préprocesseur évalue n'importe quelle option `-D' et `-U' présente sur
 la ligne de com­ mandes avant de traiter `-imacros fichier', quel que soit
 leur ordre d'écriture.
 Toutes les options `-include' et `-imacros' sont traitées dans leur ordre
 d'écriture.
\end_layout

\begin_layout Standard
-idirafter répertoire Ajoute le répertoire répertoire au second chemin d'inclusi
on.
 Les répertoires dans le second chemin d'inclusion sont parcourus quand
 un fichier d'entête n'est trouvé dans aucun des répertoires du chemin principal
 d'inclusion (Celui auquel `-I' s'ajoute).
\end_layout

\begin_layout Standard
-iprefix préfixe Spécifie préfixe comme étant le préfixe pour les options
 `-iwithprefix' ultérieures.
\end_layout

\begin_layout Standard
-iwithprefix répertoire Ajoute un répertoire au second chemin d'inclusion.
 Le nom du répertoire est créé en concaténant préfixe et répertoire, où
 préfixe a été spécifié préalablement par `-iprefix'.
\end_layout

\begin_layout Standard
-nostdinc Ne pas chercher les fichiers d'entête dans les répertoires standards
 du système.
 Seuls les réper­ toires que vous avez spécifiés avec des options `-I' (et
 le répertoire courant, si c'est approprié) sont parcourus.
\end_layout

\begin_layout Standard
En utilisant à la fois `-nostdinc' et `-I-', vous pouvez limiter la recherche
 de fichiers d'entête aux seuls répertoires que vous spécifiez explicite­
 ment.
\end_layout

\begin_layout Standard
-nostdinc++ Ne pas rechercher de fichiers d'entête dans les répertoires
 standards C++, mais toujours les chercher dans les autres répertoires standards.
 (Cette option est utilisée quand on construit `libg++'.)
\end_layout

\begin_layout Standard
-undef Ne pas prédéfinir de macros non standard.
 (Ceci incluant les drapeaux d'architecture).
\end_layout

\begin_layout Standard
-E Lancer uniquement le préprocesseur C.
 Prétraiter tous les fichiers sources C spécifiés et produire les résultats
 sur la sortie standard ou dans le fichier de sortie spécifié.
\end_layout

\begin_layout Standard
-C Dire au préprocessuer de ne pas se débarrasser des commentaires.
 Utilisé avec l'option `-E'.
\end_layout

\begin_layout Standard
-P Dire au préprocessuer de ne pas générer d'instruc­ tions `#line'.
 Utilisé avec l'option `-E'.
\end_layout

\begin_layout Standard
-M [ -MG ] Dire au préprocessuer de générer une règle con­ venant à make
 décrivant les dépendances de chaque fichier objet.
 Pour chaque fichier source, le préprocesseur génère une règle make dont
 la cible est le nom du fichier objet pour ce fichier source, et dont les
 dépendances sont tous les fichiers in­ clus par des `#include'.
 Cette règle peut être une simple ligne ou peut être continuée par `
\backslash
'-newline si elle est trop longue.
 La liste de règles est imprimée sur la sortie standard au lieu du pro­
 gramme C prétraité.
\end_layout

\begin_layout Standard
`-M' implique `-E'.
\end_layout

\begin_layout Standard
`-MG' informe de traiter les fichier d'entête man­ quants comme des fichiers
 générés et suppose qu'ils sont situés dans le même répertoire que le fichier
 source.
 Il doit être spécifié en plus de `-M'.
\end_layout

\begin_layout Standard
-MM [ -MG ] Comme `-M', mais la sortie mentionne uniquement les fichiers
 d'entête de l'utilisateur inclus par `#in­ clude fichier"'.
 Les fichiers d'entête du système inclus par `#include <fichier>' sont omis.
\end_layout

\begin_layout Standard
-MD Comme `-M', mais les informations de dépendances sont écrites dans des
 fichiers dont les noms sont construits en remplaçant `.o' par `.d' à la fin
 des noms de fichiers de sortie.
 Ceci, en plus de com­ piler les fichiers comme spécifié--`-MD' n'interdit
 pas la compilation ordinaire comme `-M' le fait.
\end_layout

\begin_layout Standard
L'utilitaire Mach `md' peut être utilisé pour fu­ sionner les fichiers `.d'
 en un unique fichier de dépendances apte à être utilisé par la commande
 `make'
\end_layout

\begin_layout Standard
-MMD Comme `-MD' sauf que cela mentionne uniquement les fichiers d'entête
 de l'utilisateur, et pas ceux du système.
\end_layout

\begin_layout Standard
-H Imprime le nom de chaque fichier d'entête utilisé, en plus d'autres activités
 normales.
\end_layout

\begin_layout Standard
-Aquestion(réponse) Affirme la réponse réponse pour question, dans le cas
 où elle serait testée par une proposition con­ ditionnelle du préprocesseur
 telle que `#if #question(réponse)'.
 `-A-' désactive les asser­ tions standards qui décrivent normalement la
 ma­ chine cible.
\end_layout

\begin_layout Standard
-Dmacro Définit la macro macro avec la chaîne de caractères `1' comme définition.
\end_layout

\begin_layout Standard
-Dmacro=defn Definit la macro macro comme defn.
 Toutes les occurences de `-D' sur la ligne de commande sont traitées avant
 n'importe quelle option `-U'.
\end_layout

\begin_layout Standard
-Umacro Supprime la définition de la macro macro.
 Les op­ tions `-U' sont évaluées après chaque option `-D', mais avant n'importe
 quelle option `-include' ou `-imacros'.
\end_layout

\begin_layout Standard
-dM Dit au préprocesseur de produire uniquement une liste des définitions
 de macros qui sont en effet à la fin du prétraitement.
 Utilisé avec l'option `-E'
\end_layout

\begin_layout Standard
-dD Dit au préprocesseur de passer toutes les défini­ tions de macros en
 sortie, dans le bon ordre dans le reste de la sortie.
\end_layout

\begin_layout Standard
-dN Comme `-dD' sauf que les arguments de macros et leur contenu sont omis.
 Seul `#define name' est inclus en sortie.
\end_layout

\begin_layout Standard
OPTION -Wa,option Passer l'option option à l'assembleur.
 Si option contient des virgules, elle est découpée en de mul­ tiple options
 aux emplacements des virgules.
\end_layout

\begin_layout Standard
OPTIONS DE L'EDITEUR DE LIENS Ces options entre en jeu quand le compilateur
 effectue l'édition des liens des fichiers objets pour créer un fichier
 de sortie exécutable.
 Elles n'ont aucune signifi­ cation particulière si le compilateur ne lance
 pas la phase d'édition des liens.
\end_layout

\begin_layout Standard
object-file-name Un nom de fichier qui ne se termine pas comme un suffixe
 spécial reconnu est supposé nommer un fichier objet ou une librairie.
 (Les fichiers ob­ jets sont distingués des librairies par l'éditeur de
 liens en fonction du contenu du fichier.) Si GCC effectue une phase d'édition
 des liens, ces fichiers objets sont utilisés comme entrée pour l'éditeur
 des liens.
\end_layout

\begin_layout Standard
-llibrairie Utilise la librairie nommée librairie pendant l'édition des
 liens.
\end_layout

\begin_layout Standard
L'éditeur de liens recherche la librairie dans une liste standard de répertoires
, librairie qui est en fait un fichier s'appelant `liblibrairie.a'.
 L'éditeur de liens utilise ensuite ce fichier comme s'il avait été spécifié
 précisément par son nom.
\end_layout

\begin_layout Standard
Les répertoires de recherche incluent divers réper­ toires standards du
 système, plus tous ceux que vous avez spécifiés par `-L'.
\end_layout

\begin_layout Standard
Normalement, les fichiers trouvés de cette façon sont des fichiers--archives
 de libaririe dont les membres sont des fichiers objets.
 L'éditeur de liens manipule un fichier archive en l'examinant pour trouver
 les membres qui ont déjà été référencés mais pas encore définis.
 Néanmoins, si l'éditeur de liens trouve un fichier objet ordi­ naire au
 lieu d'une librairie, le fichier objet est lié de la façon habituelle.
 La seule différence entre utiliser l'option `-l' et spécifier un nom de
 fichier est que `-l' entoure librairie avec `lib' et `.a' et cherche dans
 plusieurs répertoires.
\end_layout

\begin_layout Standard
-lobjc Vous avez besoin de ce cas particulier de l'option -l afin d'effectuer
 l'édition des liens d'un pro­ gramme Objective C.
\end_layout

\begin_layout Standard
-nostartfiles Ne pas utiliser les fichiers de démarrage standards du système
 en effectuant l'édition de liens.
 Les librairies standards sont utilisées nomralement.
\end_layout

\begin_layout Standard
-nostdlib Ne pas utiliser les fichiers de démarrage et les librairies standards
 du système en effectuant l'édition de liens.
 Seuls les fichiers que vous spécifiés seront passés à l'éditeur de liens.
\end_layout

\begin_layout Standard
-static Sur les systèmes supportant l'édition des liens dy­ namique, ceci
 empêche d'effectuer une édition de liens en utilisant des librairies partagées.
 Sur les autres systèmes, cette option n'a aucun effet.
\end_layout

\begin_layout Standard
-shared Produit un objet partagé qui peut être lié avec d'autres objets
 pour former un exécutable.
 Seul un petit nombre de systèmes supportent cette option.
\end_layout

\begin_layout Standard
-symbolic Lier les références à des symboles globaux en con­ struisant un
 objet partagé.
 Avertir des références non résolues (à moins que l'option ne soit annulée
 par l'option de l'éditeur de liens `-Xlinker -z -Xlinker defs').
 Seul un petit nombre de systèmes supportent cette option.
\end_layout

\begin_layout Standard
-Xlinker option Passer option en tant qu'option pour l'éditeur de liens.
 Vous pouvez utiliser ceci pour fournir des options d'édition des liens
 spécifiques au système que GNU CC ne sait pas comment reconnaître.
\end_layout

\begin_layout Standard
Si vous voulez passer une option qui prend un argu­ ment, vous devez utiliser
 `-Xlinker' deux fois, la première pour l'option et la seconde pour l'argu­
 ment.
 Par exemple, pour passer `-assert definitions', vous devez écrire `-Xlinker
 -assert -Xlinker definitions'.
 Cela ne fonctionne pas d'écrire `-Xlinker "-assert definitions"', car cela
 passe la chaîne de caractères entière comme un seul argument, ce qui n'est
 pas à quoi s'attend l'édi­ teur de liens.
\end_layout

\begin_layout Standard
-Wl,option Passer option en tant qu'option pour l'éditeur de liens.
 Si option contient des virgules, elle est découpée en de multiples options
 aux emplacements des virgules.
\end_layout

\begin_layout Standard
-u symbole Prétendre que le symbole symbole est non défini, pour obliger
 la liaison avec les modules de li­ brairies pour le définir.
 Vous pouvez utiliser `-u' de multiples fois avec différents symboles pour
 forcer le chargement de modules additionnels de librairies.
\end_layout

\begin_layout Standard
OPTIONS DE REPERTOIRES Ces options spécifient les répertoires où chercher
 les fichiers d'entête, les librairies et les parties du compi­ lateur :
\end_layout

\begin_layout Standard
-Irépertoire Ajoute le répertoire répertoire à la liste des répertoires
 où chercher les fichiers d'entête.
\end_layout

\begin_layout Standard
-I- Tous les répertoires spécifiés avec des options `-I' avant l'option
 `-I-' sont parcourus uniquement pour le cas de `#include "fichier"'; ils
 ne sont pas parcourus pour des `#include <fichier>'.
\end_layout

\begin_layout Standard
Si des réperoires additionnels sont spécifiés par des options `-I' après
 le `-I-', ces répertoires sont parcourus pour toutes les directives `#include'.
 (D'ordinaire tous les répertoires `-I' sont utilisés de cette façon.)
\end_layout

\begin_layout Standard
En plus, l'option `-I-' empêche l'utilisation du répertoire courant (où
 est situé le fichier d'en­ trée actuel) comme le premier répertoire de
 recherche pour `#include "fichier"'.
 Il n'y a au­ cune manière d'annuler cet effet de `-I-'.
 Avec `-I.' , vous pouvez spécifier de chercher dans le répertoire qui était
 courant au moment de l'invoca­ tion du compilateur.
 Ce n'est pas exactement ce que fait le préprocesseur par défaut, mais c'est
 souvant satisfaisant.
\end_layout

\begin_layout Standard
`-I-' n'empêche pas l'utilisation des fichiers d'entête standards du système.
 Donc, `-I-' et `-nostdinc' sont indépendants.
\end_layout

\begin_layout Standard
-Lrépertoire Ajoute le répertoire répertoire à la liste des répertoires
 où aller chercher `-l'.
\end_layout

\begin_layout Standard
-Bpréfixe Cette option spécifie où trouver les exécutables, les librairies
 et les fichiers de données du compi­ lateur lui-même.
\end_layout

\begin_layout Standard
Le programme pilote du compilateur lance un ou plusieurs des sous-programmes
 `cpp', `cc1' (ou, pour le C++, `cc1plus'), `as' ou `ld'.
 Il essaie d'utiliser préfixe comme un préfixe pour chaque programme qu'il
 essaie de lancer, à la fois avec et sans `machine/version/'.
\end_layout

\begin_layout Standard
Pour chaque sous-programme à lancer, le pilote du compilateur essaie d'abord
 le préfixe `-B', s'il est présent.
 Si ce nom n'est pas trouvé, ou si `-B' n'était pas spécifié, le pilote
 essaie deux préfixes standards, qui sont `/usr/lib/gcc/' et `/usr/local/lib/gcc
-lib/'.
 Si aucun des deux ne résulte en un nom de fichier qui est trouvé, le pi­
 lote du compilateur recherche le nom non modifié du programme en utilisant
 les réperoires spécifiés dans votre variable d'environnement `PATH'.
\end_layout

\begin_layout Standard
Le fichier de support à l'exécution `libgcc.a' est aussi recherché en utilisant
 le préfixe `-B' si nécessaire.
 S'il n'est pas trouvé ici, les deux préfixes standards ci-dessus sont essayés,
 et c'est tout.
 Le fichier n'est pas pris en compte lors de l'édition des liens s'il n'est
 pas trouvé de cette façon.
 La plupart du temps, sur la plupart des machines, `libgcc.a' n'est pas réellemen
t néces­ saire.
\end_layout

\begin_layout Standard
Vous pouvez obtenir un résultat similaire àgrâce à la variable d'environnement
 GCC_EXEC_PREFIX; si elle est définie, sa valeur est utilisée comme préfixe
 de la même manière.
 Si à la fois l'option `-B' et la variable GCC_EXEC_PREFIX sont présentes,
 l'option `-B' est utilisée en premier lieu, et la valeur de la variable
 d'environnement en second lieu.
\end_layout

\begin_layout Standard
OPTIONS D'AVERTISSEMENTS Les avertissements sont des messages de diagnostic
 qui rapportent des constructions qui ne sont pas par nature erronées, mais
 qui sont risquées ou qui peuvent suggérer qu'il y ait peut-être une erreur.
\end_layout

\begin_layout Standard
Ces options contrôlent la quantité et les types d'aver­ tissements produits
 par GNU CC:
\end_layout

\begin_layout Standard
-fsyntax-only Vérifie le code pour des erreurs de syntaxe, mais n'émet aucune
 sortie.
\end_layout

\begin_layout Standard
-w Empêche tout message d'avertissement.
\end_layout

\begin_layout Standard
-Wno-import Empêche les messages d'avertissement sur l'utilisa­ tion de
 #import.
\end_layout

\begin_layout Standard
-pedantic Fournit tous les avertissement demandés par le standard ANSI C
 strict ; rejette tous les pro­ grammes qui utilisent des extensions interdites.
\end_layout

\begin_layout Standard
Les programmes C valides au format standard ANSI devraient compiler sans
 problème avec ou sans cette option (bien qu'un petit nombre d'entre eux
 re­ quierrent `-ansi').
 Néanmoins, sans cette option, certaines extensions GNU et des caractéristiques
 du C traditionnel seront également supportées.
 Avec cette option, elles sont rejetées.
 Il n'y a aucune raison d' utiliser cette option; elle existe uniquement
 pour satisfaire les pédants.
\end_layout

\begin_layout Standard
`-pedantic' n'engendre aucun message d'erreur sur l'utilisation de mots-clés
 alternatifs dont les noms commencent et se terminent par `__'.
 Les avertissements pédants sont également désactivés dans l'expression
 qui suit __extension__.
 Néan­ moins, seuls les fichiers d'entête du système de­ vraient utiliser
 ces sorties de secours; les pro­ grammes d'application devraient les éviter.
\end_layout

\begin_layout Standard
-pedantic-errors Comme `-pedantic', sauf que des erreurs sont pro­ duites
 plutôt que des avertissements.
\end_layout

\begin_layout Standard
-W Imprime des messages d'avertissement supplémen­ taires pour ces événements
 :
\end_layout

\begin_layout Standard
· Une variable automatique non volatile pourrait être modifiée par un appel
 à longjmp.
 Ces avertissement sont uniquement possibles lors d'une compilation optimisante.
\end_layout

\begin_layout Standard
Le compilateur voit uniquement les appels à setjmp.
 Il ne peut pas savoir où longjmp sera appelé ; en fait, un gestionnaire
 de signal pourrait l'appeler n'importe où dans le code.
 En conséquence, vous pouvez obtenir un avertissement même s'il n'y a en
 fait aucun problème car longjmp ne peut en fait pas être appelé à l'endroit
 qui poserait problème.
\end_layout

\begin_layout Standard
· Une fonction peut revenir avec ou sans valeur.
 (Sortir à la fin du corps de la fonction est con­ sidéré comme ne retourner
 aucune valeur.) Par ex­ emple, cette fonction engendrerait un tel aver­
 tissement :
\end_layout

\begin_layout Standard
foo (a) { if (a > 0) return a; }
\end_layout

\begin_layout Standard
Des avertissements intempestifs peuvent se produire car GNU CC ne se rend
 pas compte que certaines fonctions (incluant abort et longjmp) ne revien­
 dront jamais.
\end_layout

\begin_layout Standard
· Une expression-instruction située du côté gauche d'une expression avec
 une virgule ne contient aucun effet de bord.
 Pour supprimer cet avertissement, transtypez l'expressions inutilisée vers
 void.
 Par exemple, une expression telle que `x[i,j]' causera un avertissemnt,
 mais `x[(void)i,j]' ne le fera pas.
\end_layout

\begin_layout Standard
· Une valeur non signée est comparée avec zéro par `>' ou `<='.
\end_layout

\begin_layout Standard
-Wimplicit-int Avertir chaque fois qu'une déclaration ne spécifie pas de
 type.
\end_layout

\begin_layout Standard
-Wimplicit-function-declaration Avertir chaque fois qu'une fonction est
 utilisée avant d'être déclarée.
\end_layout

\begin_layout Standard
-Wimplicit Idem que -Wimplicit-int et -Wimplicit-function-dec­ laration.
\end_layout

\begin_layout Standard
-Wmain Avertir si la fonction main est déclarée ou définie avec un type
 suspect.
 Typiquement, c'est une fonc­ tion avec une liaison externe, renvoyant un
 int, et prenant zéro ou deux arguments.
\end_layout

\begin_layout Standard
-Wreturn-type Avertir chaque fois qu'une fonction est définie avec un type
 de retour qui est int par défaut.
 Avertir également de toute instruction return ne retournant aucune valeur
 dans une fonction dont le type de retour n'est pas void.
\end_layout

\begin_layout Standard
-Wunused Avertir chaque fois qu'une variable locale est inu­ tilisée à l'écart
 de sa déclaration, chaque fois qu'une fonction est déclarée statique mais
 n'est jamais définie, et chaque fois qu'une instruction calcule un résultat
 qui n'est pas utilisé ex­ plicitement.
\end_layout

\begin_layout Standard
-Wswitch Avertir chaque fois qu'une instruction switch a un index de type
 énuméré auquel manque un case pour un ou plusieurs des codes nommés de
 cette énumération.
 (La présence d'un label default empêche cet aver­ tissement de se produire.)
 Les labels case en de­ hors de la portée de l'énumeration provoquent aussi
 des avertissements quand cette option est utilisée.
\end_layout

\begin_layout Standard
-Wcomment Avertir quand une séquence de début de commentaire `/*' apparaît
 dans un commentaire.
\end_layout

\begin_layout Standard
-Wtrigraphs Avertir quand n'importe quel trigraphe est rencon­ tré (en supposant
 qu'ils soient activés).
\end_layout

\begin_layout Standard
-Wformat Vérifie les appels à printf et scanf, etc., pour s'assurer que les
 arguments fournis ont des types appropriés à la chaîne de format spécifiée
\end_layout

\begin_layout Standard
-Wchar-subscripts Avertir si un indice de tableau a le type char.
 Ceci est une cause fréquente d'erreur puisque les programmeurs oublient
 souvent que ce type est signé sur certaines machines.
\end_layout

\begin_layout Standard
-Wuninitialized Une variable automatique est utilisée sans avoir été initialisée
 au préalable.
\end_layout

\begin_layout Standard
Ces avertissements sont possibles uniquement en cas de compilation optimisante,
 car ils requierrent de l'information sur le flux de données qui est cal­
 culé uniquement dans la compilation optimisante.
 SI vous ne spécifiez pas `-O', vous n'obtiendrez simplement pas ces avertisseme
nts.
\end_layout

\begin_layout Standard
Ces avertissements se produisent uniquement pour les variable qui sont candidate
s à une allocation dans un registre.
 Donc, elles ne se produisent pas pour une variable déclarée volatile, ou
 dont l'adresse est utilisée, ou encore donc la taille est différente de
 1, 2, 4 ou 8 octets.
 Ils ne se produisent pas non plus pour les structures, les unions ou les
 tableaux, même quand ils sont dans des registres.
\end_layout

\begin_layout Standard
Notez qu'il n'y a pas d'avertissement au sujet d'une variable qui est utilisée
 uniquement pour calculer une valeur qui n'est elle-même jamais utilisée,
 car de tels calculs peuvent être sup­ primés par l'analyse du flux de données
 avant que les avertissements ne soient affichés.
\end_layout

\begin_layout Standard
Ces avertissements ont été faits optionnels car GNU CC n'est pas assez intellige
nt pour détecter toutes les raisons qui pourraient pousser un code à être
 correct en dépit de l'apparence de contenir une er­ reur.
 Voici un exemple de comment cela peut se produire :
\end_layout

\begin_layout Standard
{ int x; switch (y) { case 1: x = 1; break; case 2: x = 4; break; case 3:
 x = 5; } foo (x); }
\end_layout

\begin_layout Standard
Si la valeur de y est toujours 1, 2 ou 3, alors x est toujours initialisé,
 mais GNU CC ne sait pas cela.
 Voici un autre cas courant :
\end_layout

\begin_layout Standard
{ int save_y; if (change_y) save_y = y, y = new_y; ...
 if (change_y) y = save_y; }
\end_layout

\begin_layout Standard
Ceci ne comporte pas d'erreur car save_y est utilisé uniquement s'il est
 préalablement ini­ tialisé.
\end_layout

\begin_layout Standard
Certains avertissements intempestifs peuvent être évités si vous déclarez
 volatile toutes les fonc­ tions que vous utilisez et qui ne retournent
 jamais à leur appelant.
\end_layout

\begin_layout Standard
-Wparentheses Avertir si des parenthèses sont omises dans cer­ tains contextes.
\end_layout

\begin_layout Standard
-Wtemplate-debugging Quand des templates sont utilisés dans un programme
 C++, avertir si le déboggage n'est pas encore pleinement disponible (C++
 uniquement).
\end_layout

\begin_layout Standard
-Wall Toutes les options `-W' ci-dessus combinées.
 Ce sont toutes les options qui se rattachent à l'usage que nous recommandons
 d'éviter et que nous croyons facile à éviter, même en conjonction avec
 des macros.
\end_layout

\begin_layout Standard
Les options `-W...' restantes ne sont pas impliquées par `-Wall' car elles
 avertissent de constructions que nous considérons comme raisonnables à
 utiliser, à l'occasion, dans des programmes propres.
\end_layout

\begin_layout Standard
-Wtraditional Avertir de certaines constructions qui se compor­ tent différemmen
t en C traditionnel et en C ANSI.
\end_layout

\begin_layout Standard
· Les arguments de macros présents dans des chaînes de carctères constantes
 dans le corps de la macro.
 Ceux-ci substitueraient l'argument en C tradition­ nel, mais font partie
 intégrante de la constante en C ANSI.
\end_layout

\begin_layout Standard
· Une fonction déclarée externe dans un bloc et en­ suite utilisée après
 la fin du bloc.
\end_layout

\begin_layout Standard
· Une instruction switch a une opérande de type long.
\end_layout

\begin_layout Standard
-Wshadow Avertir chaque fois qu'une variable locale masque une autre variable
 locale.
\end_layout

\begin_layout Standard
-Wid-clash-len Avertir chaque fois que deux identificateurs dis­ tincts
 sont identiques dans les premiers len car­ actères.
 Ceci peut vous aider à préparer un pro­ gramme qui pourra être compilé
 dans certains compi­ lateurs de l'âge de pierre.
\end_layout

\begin_layout Standard
-Wpointer-arith Avertir de tout ce qui dépend de la "taille" d'un type fonction
 ou de void.
 GNU C donne à ces types une taille de 1, pour sa propre convenance dans
 les calculs avec des pointeurs void * et des pointeurs vers des fonctions.
\end_layout

\begin_layout Standard
-Wcast-qual Avertir chaque fois qu'un pointeur est transtypé afin de supprimer
 un qualificateur de type du type de la cible.
 Par exemple, avertir si un const char * est transtypé vers un char * ordinaire.
\end_layout

\begin_layout Standard
-Wcast-align Avertir chaque fois qu'un pointeur est transtypé d'une façon
 telle que l'alignement de la cible est augmenté.
 Par exemple, avertir si un char * est transtypé vers un int * sur des machines
 où les en­ tiers peuvent uniquement être accédés à des limites de deux
 ou quatre octets.
\end_layout

\begin_layout Standard
-Wwrite-strings Donne aux chaînes de caractères constantes le type const
 char[longueur] de sorte que la copie de l'adresse d'une de celles-ci dans
 un pointeur const char * non constant engendrera un avertissement.
 Ces avertissements vous aiderons à trouver au mo­ ment de la compilation
 du code qui tente d'écrire dans une chaîne de carctères constante, mais
 uniquement si vous avez été très attentif en util­ isant const dans les
 déclarations et les proto­ types.
 Sinon, cela ne pourrait qu'être nuisible; voilà pourquoi nous n'avons pas
 inclu ces aver­ tissements dans `-Wall'.
\end_layout

\begin_layout Standard
-Wconversion Avertir si un prototype cause une conversion de types qui est
 différente de ce qui arriverait au même argument en l'absence d'un prototype.
 Ceci inclue les conversions de point fixe vers flottant et vice-versa,
 et les conversions modifiant la largeur ou le signe d'un argument de type
 point fixe sauf quand elles sont identiques à la promo­ tion par défaut.
\end_layout

\begin_layout Standard
-Waggregate-return Avertir si n'importe quelle fonction retournant une structure
 ou une union est déclarée ou appelée.
 (Dans les langages où on peut retourner un tableau, ceci provoque également
 un avertissement.)
\end_layout

\begin_layout Standard
-Wstrict-prototypes Avertir si une fonction est déclarée ou définie sans
 spécifier le type des arguments.
 (Une défini­ tion de fonction écrite dans l'ancien style est permise sans
 avertissement si elle est précédée par une déclaration qui spécifie le
 type des argu­ ments.)
\end_layout

\begin_layout Standard
-Wmissing-prototypes Avertir si une fonction globale est définie sans déclaratio
n de prototype préalable.
 Cet avertisse­ ment est délivré même si la définition elle-même fournit
 un prototype.
 Le but est de détecter les fonctions globales qui ne sont pas déclarées
 dans des fichiers d'entête.
\end_layout

\begin_layout Standard
-Wmissing-declarations Avertir si une fonction globale est définie sans
 une déclaration préalable.
 Faire cela même si la définition elle-même fournit un prototype.
 Utilisez cette option pour détecter les fonctions globales qui ne sont
 pas déclarées dans des fichiers d'entête.
\end_layout

\begin_layout Standard
-Wredundant-decls Avertir si quoi que ce soit est déclaré plus d'une fois
 dans la même portée, même dans les cas où une déclaration multiple est
 valide et ne change rien.
\end_layout

\begin_layout Standard
-Wnested-externs Avertir si une déclaration extern est rencontrée à l'intérieur
 d'une fonction.
\end_layout

\begin_layout Standard
-Wenum-clash Avertir d'une conversion entre différents types énumérés (C++
 uniquement).
\end_layout

\begin_layout Standard
-Wlong-long Avertir si le type long long est utilisé.
 C'est le comportement par défaut.
 Pour inhiber les messages d'avertissement, utilisez le drapeau `-Wno-long-long'.
 Les drapeaux `-W-long-long' et `-Wno-long-long' sont pris en compte uniquement
 quand le drapeau `-pedantic' est utilisé.
\end_layout

\begin_layout Standard
-Woverloaded-virtual (C++ uniquement.) Dans une classe dérivée, les définitions
 de fonctions virtuelles doivent corre­ spondre à la signature des types
 d'une fonction virtuelle déclarée dans la classe de base.
 Utilisez cette option pour requérir des avertisse­ ments quand une classe
 dérivée déclare une fonction qui peut être une tentative erronée de définir
 une fonction virtuelle, çàd avertir quand il y a une fonction avec le même
 nom qu'une fonction virtuelle dans la classe de base, mais avec une signature
 de types qui ne correspond à aucune fonction virtuelle de la classe de
 base.
\end_layout

\begin_layout Standard
-Winline Avertir quand une fonction ne peut pas être placée en ligne, et
 ce si elle a été déclarée comme étant en ligne, ou si l'option -finline-functio
ns a été donnée.
\end_layout

\begin_layout Standard
-Werror Traiter les avertissements comme des erreurs; avorter la compilation
 après n'importe quel aver­ tissemnt.
\end_layout

\begin_layout Standard
OPTIONS DE DEBOGGAGE GNU CC a des options spéciales variées qui sont utilisées
 pour débogger ou votre programme, ou GCC :
\end_layout

\begin_layout Standard
-g Produire des informations de déboggage dans le for­ mat natif du système
 d'exploitation (stabs, COFF, XCOFF, ou DWARF).
 GDB peut travailler avec ces in­ formations de déboggage.
\end_layout

\begin_layout Standard
Sur la plupart des systèmes utilisant le format stabs, `-g' active l'utilisation
 d'informations de déboggage supplémentaires que seul GDB peut utilis­ er
 ; ces informations supplémentaires améliorent le déboggage avec GDB mais
 vont probablement faire crasher les autres déboggeurs, ou leur faire refus­
 er de lire le programme.
 Si vous voulez contrôler avec certitude s'il faut générer de l'information
 supplémentaire, utilisez `-gstabs+', `-gstabs', `-gxcoff+', `-gxcoff',
 `-gdwarf+', or `-gdwarf' (voir ci-dessous).
\end_layout

\begin_layout Standard
Au contraire de la plupart des autres compilateurs C, GNU CC vous permet
 d'utiliser `-g' avec `-O'.
 Les raccourcis empruntés par du code optimisé peu­ vent occasionnellement
 produire des résultats sur­ prenants : certaines variables que vous aviez
 déclarées peuvent ne plus exister du tout; le flux de contrôle peut brièvement
 se déplacer là où vous ne vous seriez pas attendu, quelques instructions
 peuvent ne pas être exécutées car elles calculent des résultats de constantes
 ou leurs valeurs étaient déjà à portée de main; quelques instruc­ tions
 peuvent s'exécuter dans des endroits différents car elles ont été déplacées
 hors de boucles.
\end_layout

\begin_layout Standard
Néanmoins, cela prouve qu'il est possible de débog­ ger une sortie optimisée.
 Cela rend possible l'us­ age de l'optimiseur pour des programmes qui peuvent
 êtres boggés.
\end_layout

\begin_layout Standard
Les options suivantes sont utiles quand GNU CC est généré avec la capacité
 de traiter plus d'un format de déboggage.
\end_layout

\begin_layout Standard
-ggdb Produire des informations de déboggage dans le for­ mat natif (s'il
 est supporté) incluant les exten­ sions GDB si c'est possible.
\end_layout

\begin_layout Standard
-gstabs Produire des informations de déboggage dans le for­ mat stabs (s'il
 est supporté) sans extensions GDB.
 C'est le format utilisé par DBX sur la plupart des systèmes BSD.
\end_layout

\begin_layout Standard
-gstabs+ Produire des informations de déboggage dans le for­ mat stabs (s'il
 est supporté), en utilisant les ex­ tensions GDB comprises uniquement par
 le déboggeur GNU (GDB).
 L'utilisation de ces extensions va probablement faire crasher les autres
 déboggeurs, ou leur faire refuser de lire le programme.
\end_layout

\begin_layout Standard
-gcoff Produire des informations de déboggage dans le for­ mat COFF (s'il
 est supporté).
 C'est le format utilisé par SDB sur la plupart des systèmes System V antérieurs
 à System V Release 4.
\end_layout

\begin_layout Standard
-gxcoff Produire des informations de déboggage dans le for­ mat XCOFF (s'il
 est supporté).
 C'est le format utilisé par le déboggeur DBX sur les systèmes IBM RS/6000.
\end_layout

\begin_layout Standard
-gxcoff+ Produire des informations de déboggage dans le for­ mat XCOFF (s'il
 est supporté), en utilisant les ex­ tensions GDB comprises uniquement par
 le déboggeur GNU (GDB).
 L'utilisation de ces extensions va probablement faire crasher les autres
 déboggeurs, ou leur faire refuser de lire le programme.
\end_layout

\begin_layout Standard
-gdwarf Produire des informations de déboggage dans le for­ mat DWARF (s'il
 est supporté).
 C'est le format utilisé par SDB sur la plupart des systèmes System V Release
 4.
\end_layout

\begin_layout Standard
-gdwarf+ Produire des informations de déboggage dans le for­ mat DWARF (s'il
 est supporté), en utilisant les ex­ tensions GDB comprises uniquement par
 le déboggeur GNU (GDB).
 L'utilisation de ces extensions va probablement faire crasher les autres
 déboggeurs, ou leur faire refuser de lire le programme.
\end_layout

\begin_layout Standard
-gniveau -ggdbniveau -gstabsniveau -gcoffniveau -gxcoffniveau
\end_layout

\begin_layout Standard
-gdwarfniveau Requérir des information de déboggage et utiliser également
 niveau pour spécifier le niveau d'infor­ mation requis.
 Le niveau par défaut est 2.
\end_layout

\begin_layout Standard
Le niveau 1 produit une information minimale, suff­ isante pour créer des
 piles d'appels (backtraces) dans des parties du programme que vous n'avez
 pas l'intention de débogger.
 Ceci inclut les descrip­ tions des fonctions et des variables externes,
 mais aucune information sur les variables locales ni sur les numéros de
 ligne.
\end_layout

\begin_layout Standard
Le niveau 3 inclue des informations supplémen­ taires, telles les définitions
 de macros présentes dans le programme.
 Certain déboggeurs supportent l'expansion des macros quand vous utilisez
 `-g3'.
\end_layout

\begin_layout Standard
-p Générer du code supplémentaire pour afficher des informations de profilage
 convenant au programme d'analyse prof.
\end_layout

\begin_layout Standard
-pg Générer du code supplémentaire pour afficher des informations de profilage
 convenant au programme d'analyse gprof.
\end_layout

\begin_layout Standard
-a Générer du code supplémentaire pour afficher des informations de profilage
 sur les blocs de base, qui enregistrera le nombre de fois que chaque bloc
 de base est exécuté.
 Ces données pourraient être utilisées par un programme comme tcov.
 Notez, cependant, que le format des données n'est pas ce à quoi tcov s'attend.
 Par la suite, GNU gprof pour­ rait être étendu pour traiter ces données.
\end_layout

\begin_layout Standard
-ax Générer du code supplémentaire pour lire les paramètres de profilage
 des blocs de base à partir du fichier `bb.in' et écrire les résultats du
 pro­ filage dans le fichier `bb.out'.
 `bb.in' contient une liste de fonctions.
 Chaque fois qu'on entre dans une fonction de la liste, le profilage est
 ac­ tivé.
 Quand la fonction la plus à l'extérieur est quittée, le profilages est
 désactivé.
 Si un nom de fonction est préfixé par `-', la fonction est ex­ clue du
 profilage.
 Si un nom de focntion n'est pas unique, il peut être désambiguïfié en écrivant
 `/chemin/nom_de_fichier.d:nom_de_fonction'.
 `bb.out' listera quelques noms de fichiers disponibles.
 Quatre noms de fonction ont une sig­ nification spéciale : `__bb_jumps__'
 forcera à écrire les fréquences de saut dans `bb.out'.
 `__bb_trace__' forcera la séquence de blocs de base à être pipelinés dans
 `gzip' et à être écrits dans le fichier `bbtrace.gz'.
 `__bb_hidecall__' forcera les instructions d'appel à être exclues de la
 trace.
 `__bb_showret__' forcera les instructions de retour à être inclues dans
 la trace.
\end_layout

\begin_layout Standard
-dlettres Dit de faire des déchargements (dumps) de déboggage durant la
 compilation aux moments spécifiées par lettres.
 Ceci est utilisé pour débogger le compi­ lateur.
 Les noms de fichiers pour la plupart des dumps sont produits en concaténant
 un mot au nom du fichier source (p.ex.
 `foo.c.rtl' or `foo.c.jump').
\end_layout

\begin_layout Standard
-dM Décharger toutes les définitions de macros à la fin du prétraitement,
 et ne rien écrire en sortie.
\end_layout

\begin_layout Standard
-dN Décharger tous les noms de macros à la fin du prétraitement.
\end_layout

\begin_layout Standard
-dD Décharger toutes les définitions de macros à la fin du prétraitement,
 en plus de la sortie normale.
\end_layout

\begin_layout Standard
-dy Décharger des informations de déboggage durant le parsage, sur la sortie
 d'erreur standard.
\end_layout

\begin_layout Standard
-dr Décharger après la génération de RTL, dans `fichier.rtl'.
\end_layout

\begin_layout Standard
-dx Générer le RTL pour une fonction au lieu de la com­ piler.
 Habituellement utilisé avec `r'.
\end_layout

\begin_layout Standard
-dj Décharger après la première optimisation de saut, dans `fichier.jump'.
\end_layout

\begin_layout Standard
-ds Décharger après le CSE (incluant l'optimisation de saut qui suivent
 parfois le CSE), dans `fichier.cse'.
\end_layout

\begin_layout Standard
-dL Décharger après l'optimisation des boucles, dans `fichier.loop'.
\end_layout

\begin_layout Standard
-dt Décharger après la seconde passe du CSE (incluant l'optimisation de
 saut suivant parfois le CSE), dans `fichier.cse2'.
\end_layout

\begin_layout Standard
-df Décharger après l'analyse de flux, dans `fichier.flow'.
\end_layout

\begin_layout Standard
-dc Décharger après la combinaison d'instructions, dans `fichier.combine'.
\end_layout

\begin_layout Standard
-dS Décharger après la première passe d'ordonnancement des instructions,
 dans `fichier.sched'.
\end_layout

\begin_layout Standard
-dl Décharger après l'allocation du registre local, dans `fichier.lreg'.
\end_layout

\begin_layout Standard
-dg Décharger après l'allocation du registre global, dans `fichier.greg'.
\end_layout

\begin_layout Standard
-dR Décharger après la seconde passe d'ordonnancement des instructions,
 dans `fichier.sched2'.
\end_layout

\begin_layout Standard
-dJ Décharger après la dernière optimisation de saut, dans `fichier.jump2'.
\end_layout

\begin_layout Standard
-dd Décharger après la planification du branchement re­ tardé, dans `fichier.dbr'.
\end_layout

\begin_layout Standard
-dk Décharger après la conversion des registres vers la pile, dans `file.stack'.
\end_layout

\begin_layout Standard
-da Produire tous les déchargements listés ci-dessus.
\end_layout

\begin_layout Standard
-dm Imprimer des statistiques sur l'usage de la mémoire, à la fin de l'exécution
, sur la sortie d'erreur standard.
\end_layout

\begin_layout Standard
-dp Annoter la sortie de l'assembleur avec un commen­ taire indiquant quel
 motif et quelle alternative ont été utilisées.
\end_layout

\begin_layout Standard
-fpretend-float Quand on exécute un compilateur multi-plateformes, prétendre
 que la machine cible utilise le même for­ mat de flottants que la machine
 hôte.
 Ceci provoque une sortie incorrecte des constantes flot­ tantes réelles,
 mais la séquence réelle d'instruc­ tions va probablement être la même que
 celle que GNU CC donnerait s'il tournait sur la machine cible.
\end_layout

\begin_layout Standard
-save-temps Stocker les fichiers intermédiaires "temporaires" de façon permanent
e ; les placer dans le répertoire courant et les nommer sur base du fichier
 source.
 Donc, compiler `foo.c' avec `-c -save-temps' pro­ duirait les fichiers `foo.cpp'
 et `foo.s', aussi bien que `foo.o'.
\end_layout

\begin_layout Standard
-print-file-name=librairie Imprimer le nom de fichier absolu complet du
 fichi­ er de librairie librairie qui serait utilisé lors de l'édition des
 liens et ne rien faire d'autre.
 Avec cette option, GNU CC ne compile ou ne lie rien du tout; il imprime
 juste le nom du fichier.
\end_layout

\begin_layout Standard
-print-libgcc-file-name Idem que `-print-file-name=libgcc.a'.
\end_layout

\begin_layout Standard
-print-prog-name=programme Comme `-print-file-name', mais recherche un pro­
 gramme tel que `cpp'.
\end_layout

\begin_layout Standard
OPTIONS D'OPTIMISATION Ces options contrôlent différents types d'optimisations
\end_layout

\begin_layout Standard
-O
\end_layout

\begin_layout Standard
-O1 Optimiser.
 La compilation optimisante prend un peu plus de temps, et beaucoup plus
 de mémoire pour une grande fonction.
\end_layout

\begin_layout Standard
Sans `-O', le but du compilateur est de réduire le coût de la compilation
 et de permettre au déboggage de produire les résultats escomptés.
 Les instruc­ tions sont indépendantes : si vous stoppez le pro­ gramme
 avec un point d'arrêt entre des instruc­ tions, vous pouvez attribuer une
 nouvelle valeur à n'importe quelle variable ou modifier l'indicateur d'instruct
ion courante (program counter) pour le faire pointer vers n'importe quelle
 autre instruc­ tion dans la fonction et obtenir exactement les mêmes résultats
 que ce à quoi vous vous attendiez du code source.
\end_layout

\begin_layout Standard
Sans `-O', seules les variables déclarées register sont allouées dans des
 registres.
 Le code compilé résultant est un petit peu moins bon que celui pro­ duit
 par PCC sans `-O'.
\end_layout

\begin_layout Standard
Avec `-O', le compilateur essaie de réduire la taille du code et le temps
 d'exécution.
\end_layout

\begin_layout Standard
Quand vous spécifiez `-O', les deux options `-fthread-jumps' et `-fdefer-pop'
 sont activées.
 Sur les machines ayant des tranches de temps re­ tardées (delay slot),
 l'option `-fdelayed-branch' est désactivée.
 Pour ces machines là qui support­ ent le déboggage même sans pointeur de
 cadre (frame pointer), l'option `-fomit-frame-pointer' est ac­ tivée.
 Sur certaines machines, d'autres drapeaux peuvent également être activés.
\end_layout

\begin_layout Standard
-O2 Optimiser encore plus.
 Presque toutes les optimi­ sations supportées qui n'impliquent pas un compro­
 mis espace/vitesse sont effectuées.
 Le déroulement des boucles et la mise en ligne de fonctions ne sont pas
 effectuées, par exemple.
 Comparée à -O, cette option augmente à la fois le temps de compi­ lation
 et la performance du code généré.
\end_layout

\begin_layout Standard
-O3 Optimiser toujours plus.
 Ceci active tout ce que fait -O2 , ce à quoi s'ajoute -finline-functions.
\end_layout

\begin_layout Standard
-O0 Ne pas optimiser.
\end_layout

\begin_layout Standard
Si vous utilisez de multiples options -O , avec ou sans numéros de niveau,
 seule la dernière option de ce type sera tenue en compte.
\end_layout

\begin_layout Standard
Les options de la forme `-fdrapeau' spécifient des dra­ peaux dépendants
 de la machine.
 La plupart des drapeaux ont à la fois les formes positive et négative;
 la forme négative de `-ffoo' serait`-fno-foo'.
 La liste suivante montre seulement une forme ; celle qui n'est pas par
 défaut.
 Vous pouvez imaginer l'autre forme en supprimant `no-' ou en l'ajoutant.
\end_layout

\begin_layout Standard
-ffloat-store Ne pas stocker les variables flottantes dans des registres.
 Ceci empêche une précision excessive non désirable sur des machines telles
 que le 68000 où les registres flottants (du 68881) gardent plus de précision
 qu'un double est supposé avoir.
\end_layout

\begin_layout Standard
Pour la plupart des programmes, l'excès de préci­ sion ne fait que du bien,
 mais un petit nombre de programmes de basent sur la définition précise
 du flottant IEEE.
 Utilisez `-ffloat-store' pour de tels programmes.
\end_layout

\begin_layout Standard
-fmemoize-lookups
\end_layout

\begin_layout Standard
-fsave-memoized Utiliser des heuristiques pour compiler plus rapi­ dement
 (C++ uniquement).
 Ces heuristiques ne sont pas activées par défaut, car elles sont seulement
 efficaces pour certains fichiers d'entrée.
 Les autres fichiers d'entrée compilent plus lentement.
\end_layout

\begin_layout Standard
La première fois que le compilateur doit construire un appel à une fonction
 membre (ou référencer un membre de données), il doit (1) déterminer si
 la classe implémente les fonctions membres ayant ce nom; (2) décider quelle
 fonction membre appeler (ce qui implique de s'imaginer quelles sortes de
 con­ versions de type doivent être faites); et (3) véri­ fier la visibilité
 de la fonction membre par l'ap­ pelant.
 Tout ceci s'ajoute pour ralentir la compi­ lation.
 Normalement, la seconde fois qu'un appel est fait vers cette fonction membre
 (ou qu'un mem­ bre de données est référencé), il doit refaire ce même (long)
 processus.
 Cela signifie que du code comme celui-ci
\end_layout

\begin_layout Standard
cout << "This " << p << " has " << n << " legs.
\backslash
n";
\end_layout

\begin_layout Standard
fait six passes à travers de ces trois pas.
 En utilisant un cache logiciel, un "hit" réduit signi­ ficativement ce
 coût.
 Malheureusemnt, utiliser le cache introduit une autre couche de mécanismes
 qui doivent être implémentés, et donc qui amènent leur propre surcoût à
 l'exécution.
 `-fmemoize-lookups' active le cache logiciel.
\end_layout

\begin_layout Standard
Puisque les privilèges d'accès (visibilité) aux membres et aux fonctions
 membres peuvent différer d'un contexte d'une fonction à une autre, g++
 peut avoir besoin de vider le cache.
 Avec le drapeau `-fmemoize-lookups', le cache est vidé après chaque fonction
 compilée.
 Le drapeau `-fsave-memoized' active le même cache logiciel, mais quand
 le compi­ lateur détermine que le contexte de la dernière fonction compilée
 donne les mêmes privilèges d'accès à la prochaine fonction à compiler,
 il préserve le cache.
 Ceci est le plus utile quand on définit des fonctions membres pour la même
 classe : si on exepte les fonctions membres qui sont des compagnons d'autres
 classes, chaque fonction membre a exactement les mêmes privilèges que tout
 autre, et le cache n'a pas besoin d'être vidé.
\end_layout

\begin_layout Standard
-fno-default-inline Ne pas rendre les fonctions membres en ligne par défaut
 simplement parce qu'elles sont définies à l'intérieur de la portée de la
 classe (C++ unique­ ment).
\end_layout

\begin_layout Standard
-fno-defer-pop Toujours dépiler les arguments de chaque appel de fonction
 dès que la fonction se termine.
 Pour les machines qui doivent dépiler les arguments après un appel de fonction,
 le compilateur laisse normale­ ment les arguments s'accumuler sur la pile
 pour plusieurs appels de fonctions, et les dépile tous en une fois.
\end_layout

\begin_layout Standard
-fforce-mem Force les opérandes mémoire à être copiées dans des registres
 avant d'effectuer des opérations arithmétiques sur eux.
 Ceci peut produire un meilleur code en faisant de toutes les références
 mémoire des sous-expressions potentiellement com­ munes.
 Quand elles ne sont pas des sous-expres­ sions communes, la combinaison
 d'instructions de­ vrait éliminer le chargement séparé dans des reg­ istres.
\end_layout

\begin_layout Standard
-fforce-addr Force les constantes d'adresse mémoire à être copiées dans
 des registres avant d'effectuer des opérations arithmétiques sur eux.
 Ceci peut pro­ duire du meilleur code exactement comme pourrait le faire
 `-fforce-mem'.
\end_layout

\begin_layout Standard
-fomit-frame-pointer Ne pas garder le pointeur de cadre dans un registre
 pour les fonctions qui n'en ont pas besoin.
 Ceci évite les instructions pour sauver, mettre à jour et restaurer les
 pointeurs de cadre ; cela permet aussi de rendre un registre supplémentaire
 disponible dans de nombreuses fonctions.
 Cela rend également le déboggage impossible sur la plupart des machines.
\end_layout

\begin_layout Standard
Sur certaines machines, telles que le Vax, ce dra­ peau n'a aucun effet,
 car la séquence standard d'appel traite automatiquement le pointeur de
 cadre, et rien n'est sauvé en prétendant qu'il n'existe pas.
 La macro de description de machine FRAME_POINTER_REQUIRED contrôle si une
 machine cible supporte de drapeau.
\end_layout

\begin_layout Standard
-finline-functions Intégrer toutes les fonctions simples dans leurs appelants.
 Le compilateur détermine heuristique­ ment quelles fonctions sont suffisamment
 simples pour valoir la peine d'être intégrées de cette façon.
\end_layout

\begin_layout Standard
Si tous les appels à une fonction donnée sont intégrés, et si la fonction
 est déclarée static, alors GCC n'effectue pas de sortie de cette fonc­
 tion en assembleur et ce de son plein droit.
\end_layout

\begin_layout Standard
-fcaller-saves Permet à des valeurs d'être allouées dans des reg­ istres
 qui seront écrasés lors d'appels de fonc­ tion, en émettant des instructions
 supplémentaires pour sauver er restaurer les registres autour de tels appels.
 Une telle allocation est effectuée uniquement quand elle semble produire
 du meilleur code que celui qui serait produit autrement.
\end_layout

\begin_layout Standard
Cette option est activée par défaut sur certaines machines, celles qui n'ont
 d'habitude pas de reg­ istres préservés lors de l'appel à utiliser à la
 place.
\end_layout

\begin_layout Standard
-fkeep-inline-functions Même si tous les appels à une fonction donnée sont
 intégrés, et que la fonction est déclarée static, produire néanmoins une
 version séparée de cette fonction appelable durant l'exécution.
\end_layout

\begin_layout Standard
-fno-function-cse Ne pas mettre d'adresse de fonctions dans des reg­ istres;
 faire contenir explicitement dans chaque instruction qui appelle une fonction
 constante, l'adresse de la fonction.
\end_layout

\begin_layout Standard
Cette option résulte en un code moins efficace, mais certaines bidouilles
 étranges qui altèrent la sortie de l'assembleur peuvent être confus si
 cette option n'est pas utilisée.
\end_layout

\begin_layout Standard
-fno-peephole Désactive toute optimisation peephole spécifique à la machine.
\end_layout

\begin_layout Standard
-ffast-math Cette option permet à GCC de violer certaines règles/spécifications
 de l'ANSI ou de l'IEEE dans l'intérêt de l'optimisation du code pour la
 vitesse.
 Par exemple, il permet au compilateur de supposer que les arguments de
 la fonction sqrt sont des nombres non négatifs.
\end_layout

\begin_layout Standard
Cette option ne devrait jamais être activée par une option `-O' car il peut
 en résulter une sortie in­ correcte pour les programmes qui dépendent d'une
 implémentation exacte des règles/spécifications de l'ANSI ou de l'IEEE
 pour les fonctions mathéma­ tiques.
\end_layout

\begin_layout Standard
Les options suivantes contrôlent des optimisations spécifiques.
 L'option `-O2' active toutes les optimisa­ tions sauf `-funroll-loops'
 et `-funroll-all-loops'.
\end_layout

\begin_layout Standard
L'option `-O' active d'habitude les options `-fthread-jumps' et `-fdelayed-branc
h', mais des machines spécifiques peuvent modifier les optimisations par
 défaut.
\end_layout

\begin_layout Standard
Vous pouvez utiliser les drapeaux suivants dans les rares cas où l'on désire
 "un règlage fin" des optimisations à effectuer.
\end_layout

\begin_layout Standard
-fstrength-reduce Effectuer les optimisations de réduction de force des
 boucles et d'élimination des variables d'itéra­ tion.
\end_layout

\begin_layout Standard
-fthread-jumps Effectuer des optimisations où l'on vérifie si un saut se
 branche vers un emplacement où une autre comparaison englobée par la première
 est trouvée.
 Si c'est le cas, le premier branchement est redirigé soit vers la destination
 du second branchement, soit sur le point le suivant immédi­ atement, dépendant
 du fait que la condition soit vraie ou fausse.
\end_layout

\begin_layout Standard
-funroll-loops Effectuer l'optimisation de déroulement des boucles.
 Ceci est fait uniquement pour les boucles dont le nombre d'itérations peut
 être déterminé au moment de la compilation ou de l'exécution.
\end_layout

\begin_layout Standard
-funroll-all-loops Effectuer l'optimisation de déroulement des boucles.
 Ceci est fait pour toutes les boucles.
 Cela ralentit habituellement les programmes.
\end_layout

\begin_layout Standard
-fcse-follow-jumps Dans l'élimination de sous-expressions communes, passe
 à travers les instructions de saut lorque la cible du saut n'est atteint
 par aucun autre chemin.
 Par exemple, quand CSE rencontre une instruction if avec une clause else
 , CSE va suivre le saut quand la condition testée est fausse.
\end_layout

\begin_layout Standard
-fcse-skip-blocks Ceci est similaire à `-fcse-follow-jumps', mais oblige
 CSE à suivre les sauts conditionnels au-dessus des blocs.
 Quand CSE rencontre une sim­ ple instruction if sans clause else, `-fcse-skip-b
locks' oblige CSE à suivre le saut au­ tour du corps du if.
\end_layout

\begin_layout Standard
-frerun-cse-after-loop Relancer l'élimination des sous-expressions com­
 munes après que les optimisations de boucles aient été effectuées.
\end_layout

\begin_layout Standard
-felide-constructors Elider les constructeurs quand cela semble plausi­
 ble (C++ uniquement).
 Avec ce drapeau, GNU C++ initialise y directement à partir de l'appel à
 foo sans passer par une variable temporaire dans le code suivant :
\end_layout

\begin_layout Standard
A foo (); A y = foo ();
\end_layout

\begin_layout Standard
Sans cette option, GNU C++ initialise d'abord y en appelant le constructeur
 approprié pour le type A; et affecte ensuite le résultat de foo dans une
 variable temporaire; et remplace finalement la valeur initiale de`y' par
 la variable temporaire.
\end_layout

\begin_layout Standard
Le comportement par défaut (`-fno-elide-constructors') est spécifié par
 le premier jet du standard C++ ANSI.
 Si vos construc­ teurs de programmes ont des effets de bord, utilis­ er
 `-felide-constructors' peut faire fonctionner votre programme différemment,
 puique certains ap­ pels de constructeurs pourraient être omis.
\end_layout

\begin_layout Standard
-fexpensive-optimizations Effectue un certain nombre d'optimisations mineures
 qui sont relativement coûteuses.
\end_layout

\begin_layout Standard
-fdelayed-branch Si supporté par la machine cible, tente de réordon­ ner
 les instructions pour exploiter des slots d'in­ struction disponibles après
 des instructions de branchement différé.
\end_layout

\begin_layout Standard
-fschedule-insns Si supporté par la machine cible, tente de réordon­ ner
 les instructions pour éliminer les pertes de vitesse à l'exécution dues
 à des données requises indisponibles.
 Cela aide les machines ayant des flottants ou des instructions de chargement
 en mémoire lents, en autorisant d'autres instructions à être exécutées
 jusqu'à ce que le résultat du chargement ou de l'instruction flottante
 soit req­ uis.
\end_layout

\begin_layout Standard
-fschedule-insns2 Similaire à `-fschedule-insns', mais requiert une passe
 supplémentaire d'ordonnancement des instruc­ tions après que l'allocation
 registre ait été ef­ fectuée.
 Ceci est spécialement utile sur des ma­ chine avec un nombre de registres
 relativement pe­ tit et où les instructions de chargement en mémoire prennent
 plus d'un cycle.
\end_layout

\begin_layout Standard
OPTIONS DE CIBLE Par défaut, GNU CC compile du code pour le même type de
 machine que celui que vous utilisez.
 Néanmoins, il peut également être installé comme un compilateur multi-plate­
 formes, pour compiler pour un autre type de machine.
 En fait, plusieurs configurations différentes de GNU CC, pour différentes
 machines cibles, peuvent être installées côte à côte.
 Ensuite, vous spécifiez laquelle utiliser avec l'option `-b' option.
\end_layout

\begin_layout Standard
En plus, des anciennes et des nouvelles versions de GNU CC peuvent être
 installées côte à côte.
 Une d'entre elles (probablement la plus récente) sera utilisée par défaut,
 mais vous pourriez également avoir envie d'en utiliser une autre.
\end_layout

\begin_layout Standard
-b machine L'argument machine spécifie la machine cible pour la compilation.
 Ceci est utile si vous avez in­ stallé GNU CC en tant que compilateur multi-pla
te­ formes.
\end_layout

\begin_layout Standard
La valeur à utiliser pour machine est la même que celle spécifiée au moment
 de la configuration de GNU CC comme un compilateur multi-plateformes.
 Par exemple, si un compilateur multi-plateformes a été configuré avec `configur
e i386v', signifiant com­ piler pour un 80386 faisant tourner System V,
 alors vous devrez spécifier `-b i386v' pour lancer ce compilateur multi-platefo
rmes.
\end_layout

\begin_layout Standard
Quand vous ne spécifiez pas `-b', cela signifie normalement que vous compilez
 pour le même type de machine que celui que vous utilisez.
\end_layout

\begin_layout Standard
-V version L'argument version spécifie quelle version de GNU CC utiliser.
 C'est utile quand de multiples ver­ sions sont installées.
 Par exemple, version pour­ rait être `2.0', signifiant exécuter GNU CC version
 2.0.
\end_layout

\begin_layout Standard
La version par défaut, quand vous ne spécifiez pas `-V', est contrôlée par
 la façon dont GNU CC est installé.
 Normalement, ce sera une version qui est recommandée pour l'usage général.
\end_layout

\begin_layout Standard
OPTIONS DEPENDANTES DE LA MACHINE Chacun des types de machine cible peut
 avoir ses propres options spéciales, commençant par `-m', pour choisir
 parmi des modèles variés de matériel ou de configurations--par exemple,
 68010 vs 68020, avec ou sans coprocesseur flot­ tant.
 Une unique version installée du compilateur peut compiler pour n'importe
 quel modèle ou configuration, selon les options spécifiées.
\end_layout

\begin_layout Standard
Quelques configurations du compilateur supportent égale­ ment des options
 spéciales additionnelles, d'habitude pour une compatibilité en ligne de
 commandes avec d'autres com­ pilateurs sur la même plate-forme.
\end_layout

\begin_layout Standard
Voici les options `-m' définies pour la série 68000 :
\end_layout

\begin_layout Standard
-m68000 .TP -mc68000 Générer une sortie pour un 68000.
 C'est le comportement par défaut quand le compilateur est configuré pour
 les systèmes à base de 68000.
\end_layout

\begin_layout Standard
-m68020
\end_layout

\begin_layout Standard
-mc68020 Générer une sortie pour un 68020 (plutôt qu'un 68000).
 C'est le comportement par défaut quand le compilateur est configuré pour
 les systèmes à base de 68020.
\end_layout

\begin_layout Standard
-m68881 Générer une sortie contenant des instructions 68881 instructions
 pour flottants.
 C'est le comportement par défaut quand le compilateur est configuré pour
 la plupart des systèmes à base de 68020 à moins que -nfp n'ait été spécifié
 lors de la configuration du compilateur.
\end_layout

\begin_layout Standard
-m68030 Générer une sortie pour un 68030.
 C'est le com­ portement par défaut quand le compilateur est con­ figuré
 pour les systèmes à base de 68030.
\end_layout

\begin_layout Standard
-m68040 Générer une sortie pour un 68040.
 C'est le com­ portement par défaut quand le compilateur est con­ figuré
 pour les systèmes à base de 68040.
\end_layout

\begin_layout Standard
-m68020-40 Générer une sortie pour un 68040, sans utiliser une seule des
 nouvelles instructions.
 Ceci résulte en un code qui peut tourner relativement efficacement sur
 un 68020/68881 ou un 68030 ou encore un 68040.
\end_layout

\begin_layout Standard
-mfpa Générer une sortie contenant des instructions Sun FPA pour flottants.
\end_layout

\begin_layout Standard
-msoft-float Générer une sortie contenant des appels de li­ brairie pour
 les flottants.
 AVERTISSEMENT: Les li­ brairies requises ne font pas partie de GNU CC.
 Normalement, les facilités du compilateur C usuel de cette machine sont
 utilisées, mais ceci ne peut être fait directement en compilation multi-plate­
 formes.
 Vous devez vous arranger pour fournir les fonctions de librairies convenant
 à la compilation multi-plateformes.
\end_layout

\begin_layout Standard
-mshort Considérer que le type int à 16 bits de largeur, comme short int.
\end_layout

\begin_layout Standard
-mnobitfield Ne pas utiliser les instructions utilisant des champs-bit.
 `-m68000' implique `-mnobitfield'.
\end_layout

\begin_layout Standard
-mbitfield Utiliser les instructions utilisant des champs-bit.
 `-m68020' implique `-mbitfield'.
 C'est le com­ portement par défaut si vous utilisez des sources non modifiées.
\end_layout

\begin_layout Standard
-mrtd Utiliser une convention d'appel de fonction différente, dans laquelle
 les fonctions prenant un nombre fixé d'arguments retournent à l'appelant
 avec l'instruction rtd , qui dépile ses arguments en sortant.
 Ceci épargne une instruction à l'ap­ pelant qui n'a alors pas besoin de
 dépiler les ar­ guments.
\end_layout

\begin_layout Standard
Cette convention d'appel est incompatible avec celle utilisée normalement
 sous Unix, donc vous ne pourrez l'utiliser si vous avez besoin d'appeler
 des librairies compilées avec le compilateur Unix.
\end_layout

\begin_layout Standard
Aussi, vous devez fournir des prototypes de fonc­ tion pour toutes les fonctions
 qui prennent un nom­ bre variable d'arguments (incluant printf); sinon,
 du code incorrect sera généré pour les appels à ces fonctions.
\end_layout

\begin_layout Standard
En plus, un code gravement incorrect en résultera si vous appelez une fonction
 avec un nombre trop élevé d'arguments.
 (Normalement, les arguments excédentaires sont ignorés sans dommage.)
\end_layout

\begin_layout Standard
L'instruction rtd est supportée par les processeurs 68010 et 68020, mais
 pas par le 68000.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour le Vax:
\end_layout

\begin_layout Standard
-munix Ne pas produire certaines instructions de saut (aobleq etc.) que l'assembl
eur Unix pour Vax ne peut traiter sur une grande portée.
\end_layout

\begin_layout Standard
-mgnu produire ces instructions de saut, en supposant que vous assemblerez
 avec l'assembleur GNU.
\end_layout

\begin_layout Standard
-mg Produire du code pour le format g des nombres flot­ tants au lieu du
 format d.
\end_layout

\begin_layout Standard
Ces interrupteurs `-m' sont supportés sur le SPARC :
\end_layout

\begin_layout Standard
-mfpu
\end_layout

\begin_layout Standard
-mhard-float Générer une sortie contenant des instructions flot­ tantes.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mno-fpu
\end_layout

\begin_layout Standard
-msoft-float Générer une sortie contenant les appels de li­ brairie pour
 les flottants.
 Attention : il n'y a pas de librairie GNU pour les flottants sur SPARC.
 Normalement, les facilités du compilateur C habituel de la machine sont
 utilisées, mais ceci ne peut être fait directement avec la compilation
 mul­ ti-plateformes.
 Vous devez vous arranger pour fournir des fonctions de librairie convenant
 à la compilation multi-plateformes.
\end_layout

\begin_layout Standard
-msoft-float Change la convention d'appel dans le fichier de sortie; donc,
 c'est seulement utile si vous compilez tout un programme avec cette option.
\end_layout

\begin_layout Standard
-mno-epilogue
\end_layout

\begin_layout Standard
-mepilogue With -mepilogue (le comportement par défaut), le compilateur
 émet toujours du code pour la sortie de fonction à la fin de chaque fonction.
 Chaque sor­ tie de fonction au milieu de la fonction (comme une instruction
 return en C) génèrera un saut vers le code de sortie à la fin de la fonction.
\end_layout

\begin_layout Standard
Avec -mno-epilogue, le compilateur essaie d'émettre du code de sortie en
 ligne à chaque sortie de fonc­ tion.
\end_layout

\begin_layout Standard
-mno-v8
\end_layout

\begin_layout Standard
-mv8
\end_layout

\begin_layout Standard
-msparclite Ces trois options séléctionnent des variantes de l'architecture
 SPARC.
\end_layout

\begin_layout Standard
Par défaut (à moins d'être spécialement configuré pour le Fujitsu SPARClite),
 GCC génère du code pour la variante v7 de l'architecture SPARC.
\end_layout

\begin_layout Standard
-mv8 vous donnera du code SPARC v8.
 La seule différence par rapport au code v7 est que le compi­ lateur émet
 des instructions de multiplication et de division entières qui existent
 sur SPARC v8 mais pas sur SPRC v7.
\end_layout

\begin_layout Standard
-msparclite vous donnera du code SPARClite.
 Ceci ajoute la multiplication entière, le pas de divi­ sion entière et
 les instructions d'examen (ffs) qui existent sur SPARClite mais pas sur
 SPARC v7.
\end_layout

\begin_layout Standard
-mcypress
\end_layout

\begin_layout Standard
-msupersparc Ces deux options sélectionnent le processeur pour lequel le
 code est optimisé.
\end_layout

\begin_layout Standard
Avec -mcypress (le comportement par défaut), le compilateur optimise le
 code pour la puce Cypress CY7C602, utilisée dans la série SparcStation/Sparc­
 Server 3xx.
 Ceci est également approprié pour les plus anciennes SparcStation 1, 2,
 IPX etc.
\end_layout

\begin_layout Standard
Avec -msupersparc le compilateur optimise le code pour le processeur SuperSparc,
 utilisé par les séries SparcStation 10, 1000 et 2000.
 Ce drapeau active également l'utilisation de l'ensemble com­ plet des instructi
ons du SPARC v8.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour le Convex:
\end_layout

\begin_layout Standard
-mc1 Générer une sortiee pour un C1.
 C'est le comporte­ ment par défaut quand le compilateur est configuré pour
 un C1.
\end_layout

\begin_layout Standard
-mc2 Générer une sortiee pour un C2.
 C'est le comporte­ ment par défaut quand le compilateur est configuré pour
 un C2.
\end_layout

\begin_layout Standard
-margcount Générer du code qui place le nombre d'arguments dans le mot précédant
 chaque liste d'arguments.
 Quelques programmes Convex et Vax non portables ont besoin de ce mot.
 (Les déboggeurs n'en ont pas be­ soin, sauf pour les fonctions avec des
 listes d'ar­ guments variables; cette information est présente dans la
 table des symboles.)
\end_layout

\begin_layout Standard
-mnoargcount Omettre le mot comptant le nombre d'arguments.
 C'est le comportement par défaut si vous utilisez les sources non modifiées.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour l'AMD Am29000:
\end_layout

\begin_layout Standard
-mdw Générer du code qui suppose que le bit DW est al­ lumé, çàd que les
 opérations sur les octets et les demi-mots sont directement supportées
 par le matériel.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mnodw Générer du code qui suppose que le bit DW n'est pas allumé.
\end_layout

\begin_layout Standard
-mbw Générer du code qui suppose que le système supporte les opérations
 d'écritures d'octet et de demi-mot.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mnbw Générer du code qui suppose que le système ne sup­ porte pas les opération
s d'écritures d'octet et de demi-mot.
 Cela implique `-mnodw'.
\end_layout

\begin_layout Standard
-msmall Utiliser un modèle de mémoire restreint qui suppose que toutes les
 adresses de fonction sont ou bien dans un seul segement de 256 Ko, ou bien
 à une adresse absolue de moins de 256Ko.
 Cela permet à l'instruction call d'être utilisée au lieu d'une séquence
 const, consth, et calli .
\end_layout

\begin_layout Standard
-mlarge Ne pas supposer que l'instruction call peut être utilisée ; c'est
 le comportement par défaut.
\end_layout

\begin_layout Standard
-m29050 Générer du code pour l'Am29050.
\end_layout

\begin_layout Standard
-m29000 Générer du code pour l'Am29000.
 C'est le comporte­ ment par défaut.
\end_layout

\begin_layout Standard
-mkernel-registers Générer des références aux registres gr64-gr95 au lieu
 des gr96-gr127.
 Cette option peut être utilisée lors de la compilation d'un noyau qui veut
 un ensemble de registres globaux disjoint de celui utilisé par le code
 en mode utilisateur.
\end_layout

\begin_layout Standard
Notez que quand cette option est utilisée, les noms de registres dans les
 drapeaux `-f' doivent utilis­ er les noms normaux en mode utilisateur.
\end_layout

\begin_layout Standard
-muser-registers Utiliser l'ensemble normal de registres globaux, gr96-gr127.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mstack-check Insérer un appel à __msp_check après chaque ajuste­ ment de
 pile.
 C'est souvent utilisé dans le code du noyau.
\end_layout

\begin_layout Standard
Ces options -m' sont définies pour les architectures Mo­ torola 88K :
\end_layout

\begin_layout Standard
-m88000 Générer du code qui fonctionnera sur le m88100 et le m88110.
\end_layout

\begin_layout Standard
-m88100 Générer du code qui fonctionnera le mieux sur le m88100, mais qui
 tourenera aussi sur un m88110.
\end_layout

\begin_layout Standard
-m88110 Générer du code qui fonctionnera le mieux sur le m88100, mais qui
 ne tournera peut-être pas sur un m88110.
\end_layout

\begin_layout Standard
-midentify-revision Inclure une directive ident dans la sortie assem­ bleur
 enregistrant le nom du fichier source, le nom et la version du compilateur,
 le cachet temporel (time stamp, çàd le moment de la compilation) et les
 drapeaux de compilation utilisés.
\end_layout

\begin_layout Standard
-mno-underscores Dans la sortie assembleur, émettre les noms de sym­ boles
 sans ajouter de caractère de soulignement au début de chaque nom.
 Le comportement par défaut est d'utiliser un "_" comme préfixe de chaque
 nom.
\end_layout

\begin_layout Standard
-mno-check-zero-division
\end_layout

\begin_layout Standard
-mcheck-zero-division Les modèles anciens de l'architecture 88K avaient
 des problèmes avec la division par zéro; en partic­ ulier, beaucoup d'entre
 eux ne la piégaient pas.
 Utilisez ces options pour éviter d'avoir à inclure (où d'inclure explicitement)
 du code additionnel pour détecter les divisions par zéro et signaler une
 exception.
 Toutes les configurations GCC pour le 88K utilisent `-mcheck-zero-division'
 par défaut.
\end_layout

\begin_layout Standard
-mocs-debug-info
\end_layout

\begin_layout Standard
-mno-ocs-debug-info Inclure (ou omettre) de l'information de déboggage additionn
elle (sur les registres utilisés dans chaque cadre de pile) comme spécifié
 par le Stan­ dard de Compatibilité d'Objet 88Open, "OCS".
 Cette information supplémentaire n'est pas nécessaire à GDB.
 C'est le comportement par défaut pour les DG/UX, SVr4, et Delta 88 SVr3.2
 est d'inclure cette information; d'autres configurations 88K omettent cette
 information par défaut.
\end_layout

\begin_layout Standard
-mocs-frame-position
\end_layout

\begin_layout Standard
-mno-ocs-frame-position Force (ou pas) les valeurs de registre à être stockées
 à un endroit particulier dans les cadres de pile, comme spécifié par l'OCS.
 Les configura­ tions DG/UX, Delta88 SVr3.2 et BCS utilisent `-mocs-frame-positio
n'; d'autres configuraration 88 ont le comportement par défaut `-mno-ocs-frame-p
osition'.
\end_layout

\begin_layout Standard
-moptimize-arg-area
\end_layout

\begin_layout Standard
-mno-optimize-arg-area Contrôle comment stocker les arguments de fonction
 dans les cadres de pile.
 `-moptimize-arg-area' épargne de l'espace, mais peut crasher certains déboggeur
s (pas GDB).
 `-mno-optimize-arg-area' se conforme mieux aux standards.
 Par défaut, GCC n'optimise pas la zône des arguments.
\end_layout

\begin_layout Standard
-mshort-data-nombre nombre Générer des références de données plus pe­ tites
 en les rendant relatives à r0, qui permet de charger une valeur en utilisant
 une seule instruc­ tion (plutôt que les deux habituelles).
 Vous con­ trôlez quelles références de données sont affectées en spécifiant
 nombre avec cette option.
 Par exem­ ple, si vous spécifiez `-mshort-data-512', alors les références
 de données affectées sont celles qui impliquent des déplacements de moins
 de 512 octets.
 `-mshort-data-nombre' n'est pas en vigueur pour nombre supérieur à 64K.
\end_layout

\begin_layout Standard
-mserialize-volatile
\end_layout

\begin_layout Standard
-mno-serialize-volatile Générer (ou ne pas le faire) du code pour garantir
 la consistance séquentielle des référence mémoires volatiles.
\end_layout

\begin_layout Standard
GNU CC garantit toujours la consistance par défaut, pour le sous-modèle
 de processeur préféré.
 Comment cela est fait dépend du sous-modèle.
\end_layout

\begin_layout Standard
Le processeur m88100 ne réordonne pas les références mémoires et fournit
 ainsi toujours la consistance séquentielle.
 Si vous utilisez `-m88100', GNU CC ne génère aucune instruction sup­ plémentair
e pour la consistance séquentielle.
\end_layout

\begin_layout Standard
L'orde des références mémoires effectuées par le m88110 ne correspond pas
 toujours avec l'ordre des instructions requérant ces références.
 En partic­ ulier, une instruction de chargement peut s'exécuter avant une
 instruction de stockage préal­ able.
 De tels réordonnancements violent la consis­ tance séquentielle des référence
 mémoires volatiles quand il y a de multiples processeurs.
 Quand vous utilisez le `-m88000' ou le `-m88110', GNU CC génère des instruction
s spéciales quand cela est approprié, pour forcer l'exécution des instructions
 dans le bon ordre.
\end_layout

\begin_layout Standard
Le code supplémentaire généré pour garantir la con­ sistance peut affecter
 la performance de votre ap­ plication.
 Si vous savez que vous pouvez en toute sécurité renoncer à cette garantie,
 vous pouvez utiliser l'option `-mno-serialize-volatile'.
\end_layout

\begin_layout Standard
Si vous utilisez l'option `-m88100' mais requérrez la consistance séquentielle
 quand vous tournez sur un processeur m88110, vous devriez utiliser `-mserialize
-volatile'.
\end_layout

\begin_layout Standard
-msvr4
\end_layout

\begin_layout Standard
-msvr3 Active (`-msvr4') ou désactive (`-msvr3') les ex­ tensions du compilateur
 relatives à System V re­ lease 4 (SVr4).
 Ceci contrôle les points suivants :
\end_layout

\begin_layout Standard
· Quelle variante de la syntaxe assembleur émettre (que vous pouvez sélectionner
 indépendamment en utilisant `-mversion-03.00').
\end_layout

\begin_layout Standard
· `-msvr4' faire reconnaître au préprocesseur C `#pragma weak'
\end_layout

\begin_layout Standard
· `-msvr4' faire produire à GCC des directives de déclaration additionnelles
 utilisées dans SVr4.
\end_layout

\begin_layout Standard
`-msvr3' est le comportement par défaut pour toutes les configurations m88k
 sauf la configuration SVr4.
\end_layout

\begin_layout Standard
-mtrap-large-shift
\end_layout

\begin_layout Standard
-mhandle-large-shift Inclure du code pour détecter les décalages-bits de
 plus de 31 bits; respectivement pour bloquer (piéger) de tels décalages
 ou pour émettre du code pour les traiter proprement.
 Par défaut, GCC ne prend aucune disposition pour les décalages-bits importants.
\end_layout

\begin_layout Standard
-muse-div-instruction De très anciens modèles de l'architecture 88K n'avaient
 pas d'instructions de division, c'est pourquoi GCC évite cette instruction
 par défaut.
 Utilisez cette option pour spécifier qu'il est sûr d'utiliser l'instruction
 de division.
\end_layout

\begin_layout Standard
-mversion-03.00 Dans la configuration DG/UX, il y a deux "parfums" de SVr4.
 Cette option modifie -msvr4 pour séléctionner si le parfum hybride COFF
 ou celui réel ELF est utilisé.
 Toutes les autres configura­ tions ignorent cette option.
\end_layout

\begin_layout Standard
-mwarn-passed-structs Avertir quand une fonction passe une structure comme
 argument ou comme résultat.
 Les conventions de passage de structures ont changé durant l'évolu­ tion
 du langage C, et sont souvent la source de problèmes de portabilité.
 Par défaut, GCC ne pro­ duit aucun de ces avertissements.
\end_layout

\begin_layout Standard
Ces options sont définies pour l'IBM RS6000:
\end_layout

\begin_layout Standard
-mfp-in-toc
\end_layout

\begin_layout Standard
-mno-fp-in-toc Contrôle si les constantes réelles flottantes vont ou ne
 vont pas dans la Table des Contenus (TDC), une table de toutes les variables
 globales et des adresses de fonction.
 Par défaut, GCC y met les constantes réelles flottantes; si la TDC déborde,
 `-mno-fp-in-toc' empêchera les flottants d'aller dans la TDC, ce qui peut
 éviter un débordement.
\end_layout

\begin_layout Standard
Ces options`-m' sont définies pour l'IBM RT PC:
\end_layout

\begin_layout Standard
-min-line-mul Utiliser une séquence de code en ligne pour les multiplications
 d'entiers.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mcall-lib-mul Appelle lmul$$ pour la multiplications des entiers.
\end_layout

\begin_layout Standard
-mfull-fp-blocks Générer des blocs de données flottantes de taille complète,
 incluant le montant minimal d'espace de scratch recommandé par IBM.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mminimum-fp-blocks Ne pas inclure d'espace de scratch supplémentaire dans
 les blocs de données flottantes.
 Cela résulte en un code plus court, mais à une exécution plus lente, puisque
 l'espace de scratch doit être alloué dynamiquement.
\end_layout

\begin_layout Standard
-mfp-arg-in-fpregs Utiliser une séquence d'appel incompatible avec la convention
 d'appel d'IBM dans lequel les arguments flottants sont passés dans des
 registres flottants.
 Notez que varargs.h et stdargs.h ne fonctionneront pas avec les flottants
 si cette option est spécifiée.
\end_layout

\begin_layout Standard
-mfp-arg-in-gregs Utiliser la convention d'appel normale pour les ar­ guments
 flottants.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mhc-struct-return Retourner les structures de plus d'un mot en mémoire,
 plutôt que dans un registre.
 Ceci fournit la compatibilité avec le compilateur MetaWare HighC (hc).
 Utilisez `-fpcc-struct-return' pour la com­ patibilité avec le compilateur
 Portable C Compiler (pcc).
\end_layout

\begin_layout Standard
-mnohc-struct-return Retourner certaines structures de plus d'un mot dans
 des registres, quand c'est opportun.
 C'est le comportement par défaut.
 Pour la compatibilité avec les compilateurs fournis par IBM, utilisez ou
 bien `-fpcc-struct-return' ou bien `-mhc-struct-return'.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour la famille d'ordina­ teurs MIPS :
\end_layout

\begin_layout Standard
-mcpu=type_de_processeur Suppose le comportement par défaut pour le type
 de machines type_de_processeur quand on ordonne les instructions.
 Le type_de_processeur par défaut est default, qui sélectionne les plus
 longs temps de cycles pour toutes les machines, de sorte que le code tourne
 à des cadences raisonnables sur tous les processeurs MIPS.
 D'autres choix pour type_de_processeur sont r2000, r3000, r4000, et r6000.
 Bien que sélectionner un type_de_processeur spécifique planifiera les choses
 de façon appro­ priée pour cette puce particulière, le compilateur ne génèrera
 aucun code qui ne soit pas en accord avec le niveau 1 du MIPS ISA (architecture
 de l'en­ semble d'instructions) sans que les interrupteurs -mips2 ou -mips3
 ne soient utilisés.
\end_layout

\begin_layout Standard
-mips2 Utiliser les instructions du niveau 2 du MIPS ISA (branchement possible,
 instructions de prise de racine carrée).
 L'interrupteur -mcpu=r4000 ou -mcpu=r6000 doit être utilisé en conjonction
 avec -mips2.
\end_layout

\begin_layout Standard
-mips3 Utiliser les instructions du niveau 3 du MIPS ISA (instructions 64
 bit).
 L'interrupteur -mcpu=r4000 doit être utilisé en conjonction avec -mips2.
\end_layout

\begin_layout Standard
-mint64
\end_layout

\begin_layout Standard
-mlong64
\end_layout

\begin_layout Standard
-mlonglong128 Ces options ne fonctionnent pas pour le moment.
\end_layout

\begin_layout Standard
-mmips-as Générer du code pour l'assembleur MIPS, et invoquer mips-tfile
 pour ajouter de l'information de débog­ gage normale.
 C'est le comportement par défaut pour toutes les plate-formes sauf la plate-for
me de référence OSF/1, qui utilise le format objet OSF/rose.
 Si n'importe lequel des interrupteurs -ggdb, -gstabs, ou -gstabs+ est utilisé,
 le pro­ gramme mips-tfile encapsulera les stabs à l'intérieur de MIPS ECOFF.
\end_layout

\begin_layout Standard
-mgas Générer du code pour l'assembleur GNU.
 C'est le comportement par défaut sur la plate-forme de référence OSF/1.
\end_layout

\begin_layout Standard
-mrnames
\end_layout

\begin_layout Standard
-mno-rnames L'interrupteur -mrnames dit de produire du code utilisant les
 noms logiciels MIPS pour les reg­ istres, au lieu des noms matériels (p.ex.,
 a0 au lieu de $4).
 L'assembleur GNU ne supporte pas l'interrupteur -mrnames , et l'assembleur
 MIPS sera informé de lancer le préprocesseur C MIPS sur le fichier source.
 L'interrupteur -mno-rnames est par défaut.
\end_layout

\begin_layout Standard
-mgpopt
\end_layout

\begin_layout Standard
-mno-gpopt L'interrupteur -mgpopt dit d'écrire toutes les déclarations de
 données avant les instructions dans la section de texte pour que l'assembleur
 MIPS génère des références d'un mot mémoire au lieu d'utiliser deux mots
 pour les courts éléments de données globaux ou statiques.
 C'est le comporte­ ment par défaut uniquement si l'optimisation est sélectionné
e.
\end_layout

\begin_layout Standard
-mstats
\end_layout

\begin_layout Standard
-mno-stats Pour chaque fonction non en ligne traitée, l'inter­ rupteur -mstats
 oblige le compilateur à émettre une ligne dans le fichier standard d'erreurs
 pour im­ primer des statistiques sur le programme (nombre de registres
 sauvegardés, taille de la pile, etc.).
\end_layout

\begin_layout Standard
-mmemcpy
\end_layout

\begin_layout Standard
-mno-memcpy L'interrupteur -mmemcpy fait appeler à tous les déplacements
 de blocs la fonction de chaînes de caractères appropriée (memcpy ou bcopy)
 au lieu de générer éventuellement du code en ligne.
\end_layout

\begin_layout Standard
-mmips-tfile
\end_layout

\begin_layout Standard
-mno-mips-tfile L'interrupteur -mno-mips-tfile oblige le compila­ teur à
 ne pas post-traiter le fichier objet avec le programme mips-tfile après
 que l'assembleur MIPS l'ait généré pour ajouter un support au déboggage.
 Si mips-tfile n'est pas lancé, alors aucune vari­ able locale ne sera accessibl
e au déboggeur.
 En plus, les objets stage2 et stage3 verront les noms des fichiers temporaires
 passés à l'assembleur en­ castrés dans le fichier objet, ce qui signifie
 que les objets ne seront pas comparés comme étant égaux.
\end_layout

\begin_layout Standard
-msoft-float Générer une sortie contenant des appels de li­ brairie pour
 les flottants.
 AVERTISSEMENT : les librairies requises ne font pas partie de GNU CC.
 Normalement, les facilités du compilateur C usuel de cette machine sont
 utilisées, mais ceci ne peut être fait directement en compilation multi-plate­
 formes.
 Vous devez vous arranger pour fournir les fonctions de librairies convenant
 à la compilation multi-plateformes.
\end_layout

\begin_layout Standard
-mhard-float Générer une sortie contenant des instructions flot­ tantes.
 C'est le comportement par défaut si vous utilisez des sources non modifiées.
\end_layout

\begin_layout Standard
-mfp64 Suppose que le bit FR dans le mot d'état est al­ lumé, et qu'il y
 a des registres flottants 32/64 bit, au lieu de registres 32/32 bit.
 Vous pouvez aussi spécifier les interrupteurs -mcpu=r4000 et -mips3
\end_layout

\begin_layout Standard
-mfp32 Suppose qu'il y a des registres 32/32 bit.
 C'est le comportement par défaut.
\end_layout

\begin_layout Standard
-mabicalls
\end_layout

\begin_layout Standard
-mno-abicalls Emettre (ou pas) les pseudo-opérations .abicalls, .cpload, et
 .cprestore que certains portages System V.4 utilisent pour du code indépendant
 de la posi­ tion.
\end_layout

\begin_layout Standard
-mhalf-pic
\end_layout

\begin_layout Standard
-mno-half-pic L'interrupteur -mhalf-pic dit de placer les poin­ teurs vers
 des références externes dans la section des données et de les charger,
 plutôt que de placer les références dans la section texte.
 Cette option ne fonctionne pas pour le moment.
 -Gnombre Placer les éléments globaux et statiques plus petits ou égaux
 à nombre octets dans les sections des données courtes ou dans les sections
 bss au lieu de la sec­ tion de données ou de bss normale.
 Cela permet à l'assembleur d'émettre des instructions portant sur une référence
 d'un mot mémoire basées sur le poin­ teur global (gp ou $28), au lieu des
 deux mots nor­ malement utilisés.
 Par défaut, nombre vaut 8 quand l'aasembleur MIPS est utilisé, et 0 quand
 l'assem­ bleur GNU est utilisé.
 L'interrupteur -Gnombre est aussi passé à l'assembleur et à l'éditeur des
 liens.
 Tous les modules devraient être compilés avec la même valeur de -Gnombre
\end_layout

\begin_layout Standard
-nocpp Dit à l'assembleur MIPS de ne pas lancer son propre préprocesseur
 sur les fichiers assembleurs de l'utilisateur (par un suffixe `.s' ) quand
 il les assemble.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour la famille d'ordina­ teurs Intel 80386
 : -m486
\end_layout

\begin_layout Standard
-mno-486 Contrôle si le code est ou n'est pas optimisé pour un 486 au lieu
 d'un 386.
 Le code généré pour un 486 tournera sur un 386 et inversément.
\end_layout

\begin_layout Standard
-msoft-float Générer une sortie contenant des appels de li­ brarire pour
 les flottants.
 Avertissement : les librairies requises ne font pas partie de GNU CC.
 Normalement, les facilités du compilateur C usuel de cette machine sont
 utilisées, mais ceci ne peut être fait directement en compilation multi-plate­
 formes.
 Vous devez vous arranger pour fournir les fonctions de librairies convenant
 à la compilation multi-plateformes.
\end_layout

\begin_layout Standard
Sur les machines où une fonction renvoie des résul­ tats flottants dans
 la pile de rsgistres 80384, quelques codes opératoires flottants peuvent
 être émis même si `-msoft-float' est utilisé.
\end_layout

\begin_layout Standard
-mno-fp-ret-in-387 Ne pas utiliser les registres FPU (Floating Point Unit
 : unité flottante) pour les valeurs de retour des fonctions.
\end_layout

\begin_layout Standard
La convention d'appel habituelle met les valeurs de retour des fonctions
 des types float et double dans un registre FPU, même s'il n'y a pas de
 FPU.
 L'idée est que le système d'exploitation devrait émuler une FPU.
\end_layout

\begin_layout Standard
L'option `-mno-fp-ret-in-387' oblige à renvoyer de telles valeurs dans des
 registres CPU ordinaires à la place.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour la famille d'ordina­ teurs HPPA :
\end_layout

\begin_layout Standard
-mpa-risc-1-0 Générer du code pour un processeur PA 1.0.
\end_layout

\begin_layout Standard
-mpa-risc-1-1 Générer du code pour un processeur PA 1.1.
\end_layout

\begin_layout Standard
-mkernel Générer du code convenant à l'usage dans des noy­ aux.
 Spécifiquement, éviter les instructions add dans lesquelles un des arguments
 est le registre DP; générer des instructions addil à la place.
 Ce­ ci évite un bogue assez grave dans l'éditeur de liens HP-UX.
\end_layout

\begin_layout Standard
-mshared-libs Générer du code qui peut être lié avec les li­ brairies partagées
 HP-UX.
 Cette option n'est pas encore totalement fonctionnelle, et n'est pas ac­
 tivée par défaut sur n'importe quelle cible PA.
 Utiliser cette option peut faire générer au compi­ lateur un code incorrect.
\end_layout

\begin_layout Standard
-mno-shared-libs Ne pas générer de code qui sera lié avec des li­ brairies
 partagées.
 C'est le comportement par défaut de toutes les cibles PA.
\end_layout

\begin_layout Standard
-mlong-calls Générer du code qui permet d'effectuer des appels à des fonctions
 plus grandes que 256K en dehors de l'appelant quand l'appelant et l'appelé
 sont dans le même fichier source.
 N'activez pas cette option à moins que le code refuse d'être lié avec des
 "er­ reurs de branchement hors de portée" de l'éditeur de liens.
\end_layout

\begin_layout Standard
-mdisable-fpregs Empêche l'utilisation de registres flottants de quelque
 manière que ce soit.
 C'est nécessaire pour compiler des noyaux qui effectuent la commutation
 de contexte paresseuse des registres flottants.
 Si vous utilisez cette option et essayez d'effectuer des opérations portant
 sur des flottants, le compi­ lateur abandonnera la compilation.
\end_layout

\begin_layout Standard
-mdisable-indexing Empêche le compilateur d'utiliser les modes d'adressage
 indexés.
 Ceci évite d'obscurs problèmes qui peuvent apparaître lors de la compi­
 lation de code MIG sous MACH.
\end_layout

\begin_layout Standard
-mtrailing-colon Ajoute un deux-point ":" à la fin des définitions de labels
 (pour les assembleurs ELF).
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour la famille d'ordina­ teurs 80960 :
\end_layout

\begin_layout Standard
-mtype_de_processeur Suppose le comportement par défaut pour le type de
 machines type_de_processeur pour les instructions et la disponibilité et
 l'alignement du mode d'adressage.
 Le type_de_processeur par défaut est kb; les autres choix sont ka, mc,
 ca, cf, sa, et sb.
\end_layout

\begin_layout Standard
-mnumerics
\end_layout

\begin_layout Standard
-msoft-float L'option -mnumerics indique que le processeur sup­ porte les
 instructions flottantes.
 L'option -msoft-float indique que l'on ne doit pas supposer que les instruction
s flottantes soient supportées.
\end_layout

\begin_layout Standard
-mleaf-procedures
\end_layout

\begin_layout Standard
-mno-leaf-procedures Essayer (ou pas) d'altérer les procédures feuilles
 pour être appelables avec l'instruction bal aussi bien qu'avec call.
 Cela résultera en un code plus efficace pour les appels explicites quand
 l'in­ struction bal peut être substituée par l'assembleur ou l'éditeur
 de liens, mais du code moins efficace dans les autres cas, tels que les
 appels via des pointeurs de fonction, ou en utilisant un éditeur de liens
 qui ne supporte pas cette optimisation.
\end_layout

\begin_layout Standard
-mtail-call
\end_layout

\begin_layout Standard
-mno-tail-call Faire (ou pas) des tentatives supplémentaires (au-delà de
 celles des portions indépendantes de la machine du compilateur) pour optimiser
 les appels récursifs terminaux dans les branchements.
 Vous pourriez ne pas vouloir ça car la détection des cas où cela n'est
 pas valide n'est pas totalement com­ plète.
 Le comportement par défaut est -mno-tail-call.
\end_layout

\begin_layout Standard
-mcomplex-addr
\end_layout

\begin_layout Standard
-mno-complex-addr Supposer (ou pas) que l'utilisation d'un mode d'adressage
 complexe est un gain sur cette im­ plémentation du i960.
 Les modes d'adressage com­ plexes peuvent ne pas être dignes d'intérêt
 sur les séries K, mais elles le sont certainement sur les séries C.
 Le comportement par défaut est actuelle­ ment -mcomplex-addr pour tous
 les processeurs sauf sur les CB et CC.
\end_layout

\begin_layout Standard
-mcode-align
\end_layout

\begin_layout Standard
-mno-code-align Aligner (ou pas) le code sur des limites de 8 octets pour
 une extraction plus rapide.
 Actuelle­ ment, cette option est activée par défaut unique­ ment sur les
 implémentations des séries C.
\end_layout

\begin_layout Standard
-mic-compat
\end_layout

\begin_layout Standard
-mic2.0-compat
\end_layout

\begin_layout Standard
-mic3.0-compat Permet la compatibilité avec l'iC960 v2.0 or v3.0.
\end_layout

\begin_layout Standard
-masm-compat
\end_layout

\begin_layout Standard
-mintel-asm Permet la compatibilité avec l'assembleur iC960.
\end_layout

\begin_layout Standard
-mstrict-align
\end_layout

\begin_layout Standard
-mno-strict-align Ne permet pas (permet) d'accès non-alignés.
\end_layout

\begin_layout Standard
-mold-align Permet la compatibilité avec l'alignement de struc­ tures de
 la version 1.3 du gcc d'Intel (basé sur gcc 1.37).
 Actuellement, c'est boggé dans le sens où l'on suppose toujours #pragma
 align 1 , et qui ne peut pas être désactivé.
\end_layout

\begin_layout Standard
Ces options `-m' sont définies pour les implémentations du DEC Alpha :
\end_layout

\begin_layout Standard
-mno-soft-float
\end_layout

\begin_layout Standard
-msoft-float Utiliser (ou pas) les instructions flottantes matérielles pour
 les opérations flottantes.
 Quand -msoft-float est spécifié, les fonctions de `libgcc1.c' seront utilisées
 pour effectuer des opérations flottantes.
 A moins qu'elles ne soient remplacées par des opérations qui émulent les
 opérations flottantes, où qu'elles soient compilées d'une façon telle qu'elles
 appellent des routines d'émulation, ces routines effectueront des opéra­
 tions flottantes.
 Si vous compilez pour un Alpha sans opérations flottantes, vous devez vous
 assurer que la librairie est construite d'une façon telle qu'elle ne les
 appelle pas.
\end_layout

\begin_layout Standard
Notez que des implémentations Alpha sans opérations flottantes sont requises
 pour avoir des registres flottants.
\end_layout

\begin_layout Standard
-mfp-reg
\end_layout

\begin_layout Standard
-mno-fp-regs Générer du code qui utilise (ou pas) l'ensemble d'instructions
 flottantes.
 -mno-fp-regs implique -msoft-float.
 Si l'ensemble d'instructions flot­ tantes n'est pas utilisé, les opérandes
 flottantes sont passées à des registres entiers comme si elles étaient
 des entiers et les résultats flottantes sont passés à $0 au lieu de $f0.
 C'est une séquence d'appel non standard; ainsi, toute fonc­ tion avec un
 argument ou une valeur de retour flot­ tant(e) appelée par du code compilé
 avec -mno-fp- regs doit aussi être compilée avec cette option.
\end_layout

\begin_layout Standard
Une utilisation typique de cette option est de con­ struire un noyau qui
 n'utilise pas de registres flottants, et donc n'a pas besoin de les sauver
 ou de les restaurer.
\end_layout

\begin_layout Standard
Ces options supplémentaires sont disponible sur System V Release 4 pour
 assurer la compatibilité avec d'autres com­ pilateurs sur ces systèmes
 :
\end_layout

\begin_layout Standard
-G Sur les systèmes SVr4, gcc accepte l'option `-G' (et la transmet à l'éditeur
 de liens du système), pour assurer la compatibilité avec d'autres compi­
 lateurs.
 Néanmoins, nous suggérons que vous util­ isiez `-symbolic' ou `-shared'
 de façon appropriée, au lieu de fournir des options d'édition de liens
 sur la ligne de commande gcc
\end_layout

\begin_layout Standard
-Qy Identifie la version de chaque outil utilisé par le compilateur, dans
 une directive assembleur .ident dans la sortie.
\end_layout

\begin_layout Standard
-Qn S'abstenir d'ajouter des directives .ident dans le fichier de sortie
 (c'est le comportement par défaut).
\end_layout

\begin_layout Standard
-YP,répertoires Rechercher dans les répertoires répertoires, et dans aucun
 autre, les librairies spécifiées avec `-l'.
 Vous pouvez séparer les entrées des réper­ toires dans répertoires par
 des deux-points.
\end_layout

\begin_layout Standard
-Ym,répertoire Recherche dans le répertoire répertoire pour trou­ ver le
 préprocesseur M4.
 L'assembleur utilise cette option.
\end_layout

\begin_layout Standard
OPTIONS DE GENERATION DE CODE Ces options indépendantes de la machine contrôlent
 les conventions d'interfaces utilisées dans la génération de code.
\end_layout

\begin_layout Standard
La plupart d'entre elles commencent par `-f'.
 Ces options ont à la fois les formes négative et positive; la forme négative
 de `-ffoo' serait `-fno-foo'.
 Dans le table ci- dessous, seule une des formes est listée--celle qui n'est
 pas par défaut.
 Vous pouvez vous imaginer l'autre forme en retirant `no-' ou en l'ajoutant.
\end_layout

\begin_layout Standard
-fnonnull-objects Suppose que les objets atteints par des références sont
 non null (C++ uniquement).
\end_layout

\begin_layout Standard
Normalement, GNU C++ fait des suppositions pru­ dentes sur les objets atteints
 par des références.
 Par exemple, le compilateur doit vérifier que a n'est pas null dans du
 code comme le suivant :
\end_layout

\begin_layout Standard
obj &a = g (); a.f (2);
\end_layout

\begin_layout Standard
Vérifier des références de ce type demande du code supplémentaire, et n'est
 pas nécessaire pour de nombreux programmes.
 Vous pouvez utiliser `-fnonnull-objects' pour omettre les vérifications
 pour null, si votre programme ne requiert pas de vérification.
\end_layout

\begin_layout Standard
-fpcc-struct-return Utiliser la même convention pour retourner des valeurs
 de type struct et union que celle qui est utilisée par le compilateur C
 habituel sur votre système.
 Cette convention est moins efficace pour les petites structures et, sur
 beaucoup de ma­ chines, elle n'est pas réentrante; mais elle a l'avantage
 de permettre l'interappelabilité entre du code compilé avec GCC et du code
 compilé avec PCC.
\end_layout

\begin_layout Standard
-freg-struct-return Utiliser la convention que les valeurs de type struct
 et union sont retournées dans des registres si c'est possible.
 C'est plus efficace pour les petites structures que -fpcc-struct-return.
\end_layout

\begin_layout Standard
Si vous ne spécifiez ni -fpcc-struct-return ni -freg-struct-return, GNU
 CC se comporte comme la convention standard par défaut sur la cible.
 S'il n'y a pas de convention standard, le comportement par défaut de GNU
 CC est -fpcc-struct-return.
\end_layout

\begin_layout Standard
-fshort-enums Alloue à un type enum uniquement le nombre d'octets dont il
 a besoin pour son rang déclaré de valeurs possibles.
 Spécifiquement, le type enum sera équivalent au plus petit type entier
 suffisamment grand pour supporter les valeurs de ce type.
\end_layout

\begin_layout Standard
-fshort-double Utiliser la même taille pour double que pour float .
\end_layout

\begin_layout Standard
-fshared-data Requiert que les données et les variables non-const de cette
 compilation soient partagées plutôt que d'être des données privées.
 La distinction n'a de sens que dans certains systèmes d'exploitation, où
 les données partagées sont partagées entre des pro­ cessus exécutant le
 même programme, alors que les données privées existent avec une copie par
 proces­ sus.
\end_layout

\begin_layout Standard
-fno-common Alloue même les variables globales non initialisées dans la
 section bss du fichier objet, plutôt que de les générer comme des blocs
 communs.
 Ceci a pour effet que si la même variable est déclarée (sans extern) dans
 deux différentes compilations, vous aurez une erreur quand vous essayerez
 de les lier.
 La seule raison pour que ceci soit utile est de vouloir vérifier que le
 programme pourrait tourner sur d'autres systèmes qui travaillent toujours
 de cette façon.
\end_layout

\begin_layout Standard
-fno-ident Ignore la directive `#ident'.
\end_layout

\begin_layout Standard
-fno-gnu-linker Ne pas sortir les initialisations globales (tels que les
 constructeurs et destructeurs C++) dans la forme utilisée par l'éditeur
 de liens GNU (sur les sytèmes où l'éditeur de liens GNU est la méthode
 standard pour les traiter).
 Utilisez cette option quand vous voulez utiliser un éditeur de liens non
 GNU, qui requiert également le programme collect2 pour être sûr que l'éditeur
 des liens du système inclue des constructeurs et des destructeurs.
 (collect2 est inclus dans la distribution GNU CC.) Pour les sytèmes qui
 doivent utiliser collect2, le pilote du compilateur gcc est configuré pour
 faire cela automatiquement.
\end_layout

\begin_layout Standard
-finhibit-size-directive Ne pas produire de directive assembleur .size ,
 ou quoi que ce soit d'autre qui causerait des ennuis si la fonction était
 coupée en son milieu, et que les deux moitiés étaient placées dans des
 emplace­ ments fortement séparés en mémoire.
 Cette option est utilisés quand on compile `crtstuff.c'; vous ne devriez
 pas l'utiliser pour quoi que ce soit d'autre.
\end_layout

\begin_layout Standard
-fverbose-asm Ajouter des commentaires supplémentaires au code assembleur
 généré pour le rendre plus lisible.
 Cette option n'est généralement utile qu'à ceux qui ont réellement besoin
 de lire le code assembleur généré (peut-être pendant le déboggage du compila­
 teur lui-même).
\end_layout

\begin_layout Standard
-fvolatile Considère toutes les références mémoires à travers des pointeurs
 comme étant volatiles.
\end_layout

\begin_layout Standard
-fvolatile-global Considère toutes les références mémoires à des éléments
 de données globales comme étant volatiles.
\end_layout

\begin_layout Standard
-fpic Si supporté par la machine cible, générer du code indépendant de la
 position, convenant à l'utilisa­ tion dans une librairie partagée.
\end_layout

\begin_layout Standard
-fPIC Si supporté par la machine cible, générer du code indépendant de la
 position, convenant à une édition de liens dynamique, et ce même si les
 branchements nécessitent de grands déplacements.
\end_layout

\begin_layout Standard
-ffixed-registre Traite le registre nommé registre comme étant un registre
 fixe; le code généré ne devrait jamais le référencer (sauf peut-être en
 tant que pointeur de pile, pointeur de cadre où dans d'autres rôles bien
 fixés).
\end_layout

\begin_layout Standard
registre doit être le nom d'un registre.
 Les noms de registres acceptés sont spécifiques à la ma­ chines et sont
 définis dans la macro REGISTER_NAMES dans le fichier de macros de descriptions
 de la ma­ chine.
\end_layout

\begin_layout Standard
Ce drapeau n'a pas de forme négative, car il spéci­ fie un triple choix.
\end_layout

\begin_layout Standard
-fcall-used-registre Traite le registre nommé registre en tant que reg­
 istre allouable qui est écrasé lors d'appels de fonctions.
 Il peut être alloué pour des variables temporaires ou des variables qui
 ne survivent pas à un appel.
 Les fonctions compilées de cette façon ne sauveront ni ne restaureront
 le registre reg­ istre.
\end_layout

\begin_layout Standard
L'utilisation de ce drapeau pour un registre qui a un rôle déterminant fixé
 dans le modèle d'exécution de la machine, tel que le pointeur de pile ou
 le pointeur de cadre, produira des résultats désas­ treux.
\end_layout

\begin_layout Standard
Ce drapeau n'a pas de forme négative car il spéci­ fie un choix triple.
\end_layout

\begin_layout Standard
-fcall-saved-registre Traite le registre nommé registre comme un registre
 allouable sauvé par des fonctions.
 Il peut être alloué même pour des variables temporaires ou des variables
 qui survivent à un appel.
 Les fonctions compilées de cette façon sauveront et restaureront le registre
 registre si elles l'utilisent.
\end_layout

\begin_layout Standard
L'utilisation de ce drapeau pour un registre qui a un role déterminant fixé
 dans le modèle d'exécution de la machine, tel que le pointeur de pile ou
 le pointeur de cadre, produira des résultats désas­ treux.
\end_layout

\begin_layout Standard
Une autre sorte de désastre résultera de l'utilisa­ tion de ce drapeau pour
 un registre dans lequel des valeurs de retour de fonctions peuvent être
 re­ tournées.
\end_layout

\begin_layout Standard
Ce drapeau n'a pas de forme négative car il spéci­ fie un choix triple.
\end_layout

\begin_layout Standard
PRAGMAS Deux directives `#pragma' sont supportées par GNU C++, pour permettre
 d'utiliser le même fichier d'entête à deux fins différentes : en tant que
 définition d'interfaces d'une classe d'un objet donné, et en tant définition
 com­ plète du contenu de cette classe d'objets.
\end_layout

\begin_layout Standard
#pragma interface (C++ uniquement.) Utilisez cette directive dans des fichiers
 d'entête qui définissent des classes d'objets, pour épargner de l'espace
 dans la plupart des fichiers objets qui utilisent ces classes.
 Normalement, les copies locales de certaines infor­ mations (copies de
 sauvegarde de fonctions membres en ligne, information de déboggage, et
 les tables internes qui implémentent les fonctions virtuelles) doivent
 être conservées dans chaque fichier objet qui inclut des définitions de
 classes.
 Quand un fichier d'entête contenant `#pragma interface' est inclus lors
 d'une compilation, cette information auxiliaire ne sera pas générée (à
 moins que le fichier source d'entrée utilise lui-même `#pragma implementation').
 Au lieu de ça, les fichiers ob­ jets contiendront des références qui seront
 résolues au moment de l'édition des liens.
\end_layout

\begin_layout Standard
#pragma implementation
\end_layout

\begin_layout Standard
#pragma implementation "objets.h" (C++ uniquement.) Utilisez ce pragma dans
 un fichier d'entrée principal, quand vous voulez une sortie complète des
 fichiers d'entête inclus qui vont être générés (et rendus visibles globalement).
 Le fichier d'entête inclus, à son tour, devrait utiliser `#pragma interface'.
 Les copies de sauve­ garde de fonction membres en ligne, l'information
 de déboggage, et les tables internes utilisées pour implémenter les fonctions
 virtuelles sont toutes générées dans des fichiers d'implémentation.
\end_layout

\begin_layout Standard
Si vous utilisez `#pragma implementation' sans ar­ gument, il s'applique
 à un fichier inclu avec le même nom de base que votre fichier source; par
 ex­ emple, dans `allclass.cc', `#pragma implementation' par lui-même est
 équivalent à `#pragma implementa­ tion "allclass.h"'.
 Utilisez l'argument chaîne de caractères si vous voulez un simple fichier
 d'im­ plémentation pour inclure du code de multiples fichiers d'entête.
\end_layout

\begin_layout Standard
Il n'y a aucune manière de découper le contenu d'un simple fichier d'entête
 en de multiples fichiers d'implémentation.
\end_layout

\begin_layout Standard
FICHIERS file.c \InsetSpace ~
fichier source C file.h \InsetSpace ~
fichier d'entête C (du préprocesseur)
 file.i \InsetSpace ~
fichier source C prétraité file.C \InsetSpace ~
fichier source C++ file.cc \InsetSpace ~
fichier
 source C++ file.cxx \InsetSpace ~
fichier source C++ file.m \InsetSpace ~
fichier source Objective-C
 file.s \InsetSpace ~
fichier en langage assembleur file.o \InsetSpace ~
fichier objet a.out \InsetSpace ~
sortie liée
 TMPDIR/cc* fichiers temporaires LIBDIR/cpp préprocesseur LIBDIR/cc1 compilateur
 pour C LIBDIR/cc1plus compilateur pour C LIBDIR/collect frontal pour l'éditeur
 de liens, nécessaire sur certaines machines LIBDIR/libgcc.a librairie de
 sous-routines GCC /lib/crt[01n].o routine de démarrage LIBDIR/ccrt0 routine
 de démarrage additionnelle pour le C++ /lib/libc.a librairie C standard,
 voir intro(3) /usr/include répertoire standard pour les fichiers #include
 LIBDIR/include répertoire gcc standard pour les fichiers #include LIBDIR/g++-in
clude répertoire g++ additionnel pour #include
\end_layout

\begin_layout Standard
LIBDIR est habituellement /usr/local/lib/machine/version.
 TMPDIR vient de la variable d'environnement TMPDIR (par défaut /usr/tmp
 si disponible, /tmp sinon).
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
COPYING Copyright 1991, 1992, 1993 Free Software Foundation, Inc.
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
L'autorisation est donnée de créer et de distribuer des copies textuelles
 de ce manuel, à condition que la notice de copyright et la notice de permission
 soient préservées dans toutes les copies.
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
L'autorisation est donnée de copier et distribuer des versions modifiées
 de ce manuel sous les conditions de copie textuelle, à condition que l'entièret
é du travail dérivé résultant soit distribuée sous les termes d'une autorisation
 identique à celle-ci.
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
L'autorisation est donnée de copier et distribuer des traductions de ce
 manuel dans n'importe quel autre langue, sous les conditions ci-dessus
 pour les versions modifiées, sauf que cette notice de permission peut être
 incluse dans des traductions approuvées par la Free Software Foundation
 au lieu de l'anglais originel.
\end_layout

\end_body
\end_document
