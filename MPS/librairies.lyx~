#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass book
\begin_preamble
\usepackage {stmaryrd}
\usepackage{ulem}
\rhead[\leftmark]{\thepage}
\lhead[\thepage]{\rightmark}
\lfoot{Pascal Farès © }
\cfoot{ISAE 2000}
\rfoot{\today}
\renewcommand{\footrulewidth}{0.4pt}
\newcommand{\deq}{$\triangleq$}
\newcommand{\defin}[1]{\textbf{#1}}     % a definition of a word or concept
\newcommand{\cmd}[1]{\texttt{#1}\index{#1}}
                                        % a shell command
\newcommand{\fn}[1]{\texttt{#1}\index{#1}}
                                        % a filename
\newcommand{\man}[1]{\emph{#1}\index{#1}}
                                        % a manual page
                                        % don't include (1) in arg!

%
% \begin{chapterquote}...\end{chapterquote} is used at the beginning of a
% chapter to typeset a quote nicely.
%
\newenvironment{chapterquote}%
        {\begin{raggedleft}\it}%
        {\end{raggedleft}\vspace{2em}}

%
% \meta is used to mark comments inserted by the author.
%
\newcommand{\meta}{\large\textbf{META:\ }}
\end_preamble
\language french
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\bullet 0
	0
	1
	5
\end_bullet
\bullet 2
	0
	1
	-1
\end_bullet

\layout Section

Modularité; compilation séparée
\layout Standard

Un programme doit réaliser un traitement sur un ensemble d'informations.
 Ce traitement peut se décomposer en traitements élémentaires.
 Chaque traitement élémentaire peut, soit étre autonome et faire l'objet
 d'un programme, soit être nécessaïre à un traitement plus complexe et définir
 alors une procédure d'un programme.
 Un programme élémentaire contiendra donc un ensemble de procédure nécessaire
 à son exécution.
 Ces procédures sont définies de manière indépendante du programme principal
 du point de vue algorithmique.
 Seule la définition des paramètres et les objectifs de la procédure sont
 nécessaires au programme principal.
 Le programme écrit dans un langage est contenu dans un fichier.
 Ce fichier peut contenir toutes les procédures nécessaires au programme
 principal.
 Dans ce cas la compilation peut produire un programme exécutable directement.
 Lorsque l'application est importante cette démarche conduit à des fichiers
 volumineux contenant un nombre important de procédures.
 L'inconvénient majeur réside dans la difficulté de manipuler alors de tel
 fichier, de l'augmentation très importante du temps de compilation, et
 de la difficulté de la mise au point.
 Les procédures peuvent par contre étre définies dans d'autres fichiers,
 étre compilées séparément, et étre ajoutées au programme principal en fin
 de processus.
 Dans ce cas les compilations du programme principal et des procédures sont
 asynchrones et le résultat ne peut être un programme exécutable.
 Aussi la compilation fournit un objet intermédiaire appelé module.
 Les modules doivent être alors regroupés pour pouvoir définir le programme
 ezécutable.
 Cette opération est réalisée pa:v un éditeur de liens.
\layout Standard

Exemple:
\layout Standard

Le programme:
\layout LyX-Code

main(int argv,char **argp){
\layout LyX-Code

    char *p;
\layout LyX-Code

    p = argp[1]; 
\layout LyX-Code

    while(*p 1= '
\backslash 
0') 
\layout LyX-Code

        if (Min(*p))
\layout LyX-Code

            Maj(*p++); 
\layout LyX-Code

        else p++;
\layout LyX-Code

    return; 
\layout LyX-Code

}
\layout LyX-Code

Min(char *a) {
\layout LyX-Code

    return(*a & 0x20); 
\layout LyX-Code

}
\layout LyX-Code

Maj (char *a) {
\layout LyX-Code

    *a &= OXDF ;
\layout LyX-Code

    return;
\layout LyX-Code

}
\layout Standard

Ce programme définit trois fonctions:
\layout Itemize

- La fonction principale
\family typewriter 
 main()
\layout Itemize

- La fonction de test de minuscule 
\family typewriter 
Min()
\layout Itemize

- La fonction de passage en majuscule 
\family typewriter 
Maj()
\layout Standard

Ces trois fonctions peuvent étre contenues dans le même fichier et compilées
 ensemble.
 Elles peuvent également être définies dans tsois fichiers différents.
 La compilation fournit alors trois modules:
\layout Itemize

- Le module principal 
\layout Itemize

- le module Min
\layout Itemize

- le module Maj
\layout Standard

Pour obtenir un programme exécutable il est alors nécessaire d'ajouter les
 deux modules Min et Maj au module principal et de réaliser le lien entre
 ces trois programmes.
 En effet dans le module principal le compilateur a placé au point adéquat
 une référence signifiant un appel à un programme encore inconnu.
 Cette référence doit être résolue, c'est à dire être défine par l'adjonction
 du module correspondant, pour que le programme soit exécutable.
\layout Standard

Avec la compilation séparée la notion de référence externe doit également
 être étendue aux variables.
 Dans le langage C on distingue deux types de variables externes: les variables
 externes aux procédures mais connues que dans un seul fichier et son module
 résultant, et les variables externes succeptibles d'être référencées dans
 n'importe quel fichier.
\layout Standard

Exemple:
\layout Standard

Le programme précédent peut être modifié pour illustrer ces deux cas de
 variables.
 Ce programme est défini dans deux fichiers.
 
\layout Description

remarque: Dans l'exemple qui suit l'utilisation de la variable intermodule
 p est réalisée pour les besoins de l'exemple; il ne faux surtous pas faire
 se genre de chose si on y est pas contraint!
\layout Standard

fichier 1: main.c
\layout Standard

char *p;
\layout LyX-Code

main(argv,argp)
\layout LyX-Code

int argv;
\layout LyX-Code

char **argp;
\layout LyX-Code

{
\layout LyX-Code

    p = argp(1); 
\layout LyX-Code

    while(*p != '
\backslash 
0') 
\layout LyX-Code

        if (Min())
\layout LyX-Code

             Maj(); 
\layout LyX-Code

        else p++;
\layout LyX-Code

}
\layout LyX-Code

\layout LyX-Code

On compile cc -c main.c (genère main.o)
\layout LyX-Code

on réalise l'edition de lien on optient
\layout Standard


\begin_inset Include \verbatiminput{MPS/expgmc/ldmain}

\end_inset 


\layout Standard

en effet les fonction Min et Max ne sont pas definies dans mian.c
\layout Standard

fichier 2: module.c
\layout LyX-Code

static char MQ = 0x20; /* variable locale*/
\layout LyX-Code

extern char *p; /* variable externe 
\begin_inset Formula $\exists $
\end_inset 

 dans 
\layout LyX-Code

                   un autre module */
\layout LyX-Code

Min() {
\layout LyX-Code

    return(*p & MQ);
\layout LyX-Code

}
\layout LyX-Code

Maj (){
\layout LyX-Code

    *P &= ~MQ; 
\layout LyX-Code

    return; 
\layout LyX-Code

}
\layout LyX-Code

On compile cc -c module.c
\layout LyX-Code

L'edition de lien
\layout LyX-Code

gcc -o montest main.o module.o
\layout LyX-Code

gcc -o avec que des fichiers.o ou librairie est equivalent à ld en y incluant
 toutes les librairies standard
\layout Standard

La variable p est une variable externe elle est par conséquent connue de
 toutes les fonctions ( principale, Min et Maj).
 La variable MQ est une variable également externe.
 Son champ d'accessibilité est cependanl limité su fichier ou elle est déclarée.
 On remarquera aussi qu'irl es~ important de distinguer la définition et
 la déclaration d'une variabl~ externe.
 Dans le fichier 1 la variable p est définie.
 Une place mémoir~ lui est alors attribuée.
 Dans le fichier 2 cette même variable es~ déclarée.
 Cela signifie qu'elle ne sera pas créée par ce fichier.
 Le; références à cette variable dans ce fichier seront considérées commi
 des références à la variable du premier fichier.
\layout Section

3.2 Les bibliothèques statiques
\layout Standard

Dans un système de dévelopement du logiciel il existe un très gram nombre
 de modules.
 Chaque module réalise une fonction élémentairi particulière.
 Le nombre de modules implique une organisation.
 Cetti organisation utilise un regroupement de modules dans un seul fichier
 Ce fichier comportant cet ensemble est appelé bibliothèque.
 L'éditeu: de liens extrait d'une bibliothèque les seuls modules nécessaires
 à la production d'un programme.
 Les fonctions de gestion d'une bibliothèqm sont:
\layout Standard

- la création
\layout Standard

- l'ajout d'un composant
\layout Standard

- la suppression d'un composant
\layout Standard

- la modification d'un composant (fonction combinant les deux dernières
 )
\layout Standard

- l'extraction d'un composant
\layout Standard

- la liste du contenu de la bibliothèque
\layout Standard

Dans le système UNIX les bibliothèques sont gérées par la commande "ar".
 Les différentes fonctions à exécuter pour la gestion d'une bibliothèque
 sont définies comme paramètre de cette commande.
 Lorsque l'éditeur de liens lit un fichier bibliothèque il intègre dans
 le programme exécutable résultant les seules parties de cette bibliothèque
 qui sont nécessaires à résoudre des références externes.
\layout Standard

Exemple: La compilation du programme précédant avec bibliothèque nécessite
 les commandes suivantes:
\layout Standard

compilation des modules Maj et Min et production de deux modules: cc -c
 Maj.c
\layout Standard

cc -c Min.c
\layout Standard

création de la bibliothèque contenant ces deux modules: ar cr bibl.a Maj.o
 Min.o
\layout Standard

rm Maj.o Min.o
\layout Standard

compilation du module principal: cc -c princ.c
\layout Standard

edition de liens: (avec GNU C)
\layout Standard

gcc -o princ princ.o bibl.a 
\layout Standard

Le programme princ est alors exécutable.
\layout Standard

La bibliothèque comportant les modules standard sous UNIX est "libc.a".
 D'autres bibliothèques plus spécialisées existent également.
 Parmi celles-ci on peut citer la bibliothèque contenant les fonctions mathémati
ques standard, la bibliothèque contenant les fonctions de gestion d'écran,
 etc..
\layout Section

Librairie dynamique
\layout Standard

commençons par un exemple
\layout Standard

Fichier libhello.c
\layout Standard
\line_top 

\begin_inset Include \verbatiminput{Dinamique/libhello.c}

\end_inset 

Fichier libhello.h
\layout Standard
\line_top 

\begin_inset Include \verbatiminput{Dinamique/libhello.h}

\end_inset 


\layout Standard

fichier loadhello.c
\layout Standard
\line_top 

\begin_inset Include \verbatiminput{Dinamique/loadhello.c}

\end_inset 

fichier usehello.c
\layout Standard
\line_top 

\begin_inset Include \verbatiminput{Dinamique/usehello.c}

\end_inset 


\layout Standard

et le Makefile suivant:
\layout LyX-Code

\layout LyX-Code


\begin_inset Include \verbatiminput{Dinamique/Makefile}

\end_inset 


\layout Subsection

Nom des librairies
\layout Standard

soname,nom: permet de nommer la librairie vous voyer le nom de la libraririe
 necessaire quand vous faite ldd executtable
\layout Subsection

Utilser la librairie
\layout Standard

au moment de la génération de l'exécutable l'option -lX indique que l'on
 souhaite utiliser la libraririe dynamisque libx.so (c'est une vérification)
\layout Subsection

Le chargement dynamique à l'éxécution
\layout Subsection

Les commande ldd et ldconfig
\layout Subsubsection

ldd
\layout Standard

NOM ldd - afficher les dépendances à des librairies partagées
\layout Standard

SYNOPSIS ldd [-vVdr] programme ...
\layout Standard

DESCRIPTION ldd affiche le nom des librairies partagées requises par chaque
 pro- gramme spécifié sur la ligne de commandes.
\layout Standard

Pour les programmes a.out, ldd n'effectue qu'un fork et un exec pour chaque
 programme avec un argc (nombre d'arguments) égal à zéro.
 L'éditeur de liens dynamiques de a.out, ld.so, qui charge normalement les
 librairies partagées, détecte ce cas spécial et affiche les dépen- dances.
\layout Standard

Pour les programmes ELF, ldd effectue un fork et un exec pour chaque programme
 avec les variables d'environnement positionnées correctement.
 L'éditeur de liens dynamiques de ELF, ld-linux.so, qui charge normale- ment
 les librairies partagées, détecte ce cas spécial et affiche les dépendances.
\layout Standard

OPTIONS 
\layout List
\labelwidthstring 00.00.0000

-v Afficher le numéro de version de ldd.
\layout List
\labelwidthstring 00.00.0000

-V Afficher le numéro de version de l'éditeur de liens dynamiques, ld.so.
\layout List
\labelwidthstring 00.00.0000

-d Effectuer des relogements et rapporter toutes les fonctions man- quantes
 (ELF uniquement).
\layout List
\labelwidthstring 00.00.0000

-r Effectuer des relogements pour les objets de données ET pour les fonctions,
 et rapporter tous les objets manquants (ELF unique- ment).
 
\layout Subsubsection

ldconfig
\layout List
\labelwidthstring 00.00.0000

NAME ldconfig - determine les assocition dynamique au runtime
\layout List
\labelwidthstring 00.00.0000

SYNOPSIS ldconfig [OPTION...]
\layout Standard

DESCRIPTION ldconfig creates the necessary links and cache (for use by the
 run-time linker, ld.so) to the most recent shared libraries found in the
 direc- tories specified on the command line, in the file /etc/ld.so.conf,
 and in the trusted directories (/usr/lib and /lib).
 ldconfig checks the header and file names of the libraries it encounters
 when determining which versions should have their links updated.
 ldconfig ignores sym- bolic links when scanning for libraries.
\layout Standard

ldconfig will attempt to deduce the type of ELF libs (ie.
 libc5 or libc6/glibc) based on what C libs if any the library was linked
 against, therefore when making dynamic libraries, it is wise to explic-
 itly link against libc (use -lc).
\layout Standard

Some existing libs do not contain enough information to allow the deduction
 of their type, therefore the /etc/ld.so.conf file format allows the specification
 of an expected type.
 This is only used for those ELF libs which we can not work out.
 The format is like this "dirname=TYPE", where type can be libc4, libc5
 or libc6.
 (This syntax also works on the command line).
 Spaces are not allowed.
 Also see the -p option.
\layout Standard

Directory names containing an = are no longer legal unless they also have
 an expected type specifier.
\layout Standard

ldconfig should normally be run by the super-user as it may require write
 permission on some root owned directories and files.
 It is nor- mally run automatically at bootup, from /etc/rc, or manually
 whenever new DLL's are installed.
 
\layout List
\labelwidthstring 00.00.0000

OPTIONS 
\layout List
\labelwidthstring 00.00.0000

-v --verbose Verbose mode.
 Print current version number, the name of each directory as it is scanned
 and any links that are created.
\layout List
\labelwidthstring 00.00.0000

-n Only process directories specified on the command line.
 Don't process the trusted directories (/usr/lib and /lib) nor those specified
 in /etc/ld.so.conf.
 Implies -N.
\layout List
\labelwidthstring 00.00.0000

-N Don't rebuild the cache.
 Unless -X is also specified, links are still updated.
\layout List
\labelwidthstring 00.00.0000

-X Don't update links.
 Unless -N is also specified, the cache is still rebuilt.
\layout List
\labelwidthstring 00.00.0000

-f conf Use conf instead of /etc/ld.so.conf.
\layout List
\labelwidthstring 00.00.0000

-C cache Use cache instead of /etc/ld.so.cache.
\layout List
\labelwidthstring 00.00.0000

-r root Change to and use root as the root directory.
\layout List
\labelwidthstring 00.00.0000

-l Library mode.
 Manually link individual libraries.
 Intended for use by experts only.
\layout List
\labelwidthstring 00.00.0000

-p --print-cache Print the lists of directories and candidate libraries
 stored in the current cache.
\layout List
\labelwidthstring 00.00.0000

-c --format=FORMAT Use FORMAT for the cache file.
 Choices are old, new and compat (the default).
\layout List
\labelwidthstring 00.00.0000

-? --help --usage Print usage information.
\layout List
\labelwidthstring 00.00.0000

-V --version Print version and exit.
 
\layout LyX-Code

\the_end
