#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section
Introduction 
\end_layout

\begin_layout Standard
Ce document présente la bibliothèque de développement LinuxThreads crée
 par Xavier Leroy.
 C'est une implémentation gratuite de la norme POSIX 1003.1c qui est censée
 assurer une certaine portabilité entre les différents systèmes d'exploitation.
 POSIX 1003.1c n'est malheureusement pas toujours supportée par les OS; si
 Solaris y est totalement conforme, on ne peut pas en dire autant d'autres
 OS même s'il existe des projets visant à ajouter cette compatibilité (on
 peut remarquer notamment le projet Open Source Pthreads-Win32 qui apporte
 (enfin) un réel support de la norme dans Windows).
 LinuxThread est presque entièrement conforme, les seuls différences qu'on
 peut trouver résident dans le nomage des fonctions et dans la gestion des
 signaux.
 
\end_layout

\begin_layout Standard
Même si nous étudions ici une seule bibliothèque, l'ensemble des notions
 et des techniques de programmation des threads que nous verrons pourra
 vous servir sur n'importe quel système d'exploitation.
 
\end_layout

\begin_layout Standard
Cette méthode moderne de programmer est de nos jours la plus répandue et
 la plus pratique pour développer des applications rapides et complexes.
 
\end_layout

\begin_layout Section
1 Un peu de théorie ...
 
\end_layout

\begin_layout Standard
Avant de commencer l'étude des LinuxThreads nous allons expliquer le principe
 des threads et des notions qui y sont associées.
 
\end_layout

\begin_layout Subsection
1.1 Qu'est-ce qu'un thread ? 
\end_layout

\begin_layout Standard
Un thread peut être considéré comme une forme de mini-processus ou precessus
 légers.
 Plusieurs processus légers peuvent s'executer en parallèle avec d'autres
 dans un même programme (processus).
 Les programmes (processus) utilisant les threads permettent, tout comme
 les programmes multi-processus, d'échapper à l'exécution séquentielle des
 instructions et ainsi de pouvoir accomplir plusieurs tâches à la fois.
 Mais il ne faut pas confondre avec la programmation multi-processus classique
 utilisant l'appel fork().
 Les threads eux, partagent tous le même espace en mémoire ainsi que les
 mêmes ressources (descripteurs de fichier, sockets etc...) contrairement aux
 processus classiques qui possèdent chacun leur propre espace mémoire.
 Plus besoin donc d'avoir recours à un segment de mémoire partagée pour
 échanger des données, chaque thread peut accéder à toutes les variables
 d'un programme.
 Ceci implique aussi que le changement de contexte entre deux threads est
 beaucoup moins gourmand en ressources que le changement de contexte entre
 deux processus.
 Un autre avantage des threads dans le cas la programmation sur des systèmes
 multi-processeurs, est l'exécution en parallèle de ceux-ci sur chacun des
 processeur qui permet d'exploiter au mieux ces systèmes.
 
\end_layout

\begin_layout Subsection
1.2 Atomicité 
\end_layout

\begin_layout Standard
Vous allez vous apercevoir rapidement que le partage des variables entre
 les threads comporte aussi des risques qu'il faut prendre en compte si
 on veut assurer une certaine stabilité à nos programmes.
 
\end_layout

\begin_layout Standard
Les opérations atomiques sont des instructions (assembleur par exemple)
 transparentes ne pouvant être interrompues.
 
\end_layout

\begin_layout Standard
Les opérations sur les données en C ne sont pas forcément atomiques et cela
 va poser problème avec la mémoire partagée.
 Par exemple, une opération d'addition a+=1 est composé de plusieurs instruction
s assembleur, une addition et une affectation.
 Entre ces deux instructions, un autre thread peut accéder à la donnée et
 la modifier, provoquant ainsi un résultat inattendu pour l'opération.
 
\end_layout

\begin_layout Subsection
Volatilité 
\end_layout

\begin_layout Standard
GCC va créer un problème qui s'ajoute à celui de la non-atomicité des opérations
 ...
 
\end_layout

\begin_layout Standard
Il effectue des optimisations en plaçant temporairement les valeurs de variables
 partagées dans les registres du processeur pour effectuer des calculs.
 Les threads accédant à la variable à cet instant ne peuvent pas se rendre
 compte des changements effectués sur celle-ci car sa copie en mémoire n'a
 pas encore été modifiée.
 Pour lui éviter d'effectuer ces optimisations, il faut ajouter le qualificatif
 volatile à la déclaration de tous les objets qui seront en mémoire partagée.
 
\end_layout

\begin_layout Subsection
Verrous 
\end_layout

\begin_layout Standard
On a vu que le problème de non-atomicité des opérations pose un problème
 lors d'un accès concurrent à une variable.
 Pour éviter ce problème, il faut pouvoir rendre atomiques les opérations
 sur les variables partagées.
 Pour cela ont étés mis en place des systèmes de verrous qui bloquent l'accès
 à une variable (a une ressource) tant que l'opération sur celle-ci n'est
 pas achevée.
 Le principe est dès plus simple.
 Lorsqu'on souhaite modifier une variable : 
\end_layout

\begin_layout Itemize
on pose un verrou sur celle-ci (les autres threads ne peuvent plus y accéder).
 
\end_layout

\begin_layout Itemize
on effectue toutes les opérations qu'on souhaite dessus (une ou plusieurs).
\end_layout

\begin_layout Itemize
on retire le verrou (et la variable est de nouveau disponible pour les autres
 threads).
 
\end_layout

\begin_layout Standard
Quand un verrou est déjà posé sur une variable et qu'un thread souhaite
 y accéder, celui-ci pourra être bloqué tant que le verrou ne sera pas retiré.
 
\end_layout

\begin_layout Section
LinuxThreads en pratique ...
 
\end_layout

\begin_layout Subsection
Un premier programme 
\end_layout

\begin_layout Standard
Les fonctions de manipulation de threads sont déclarées dans le fichier
 entête pthread.h.
 Nous allons étudier un premier programme utilisant deux threads d'affichage
 qui effectuent chacun la même opération en parallèle (afficher la valeur
 d'un compteur).
 
\end_layout

\begin_layout Standard
thread1.c : 
\end_layout

\begin_layout Standard

\lyxline

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
vspace{-1
\backslash
parskip}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand verbatiminput
filename "Threads/thread1.c"

\end_inset


\lyxline

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
On le compile en utilisant la commande suivante : 
\end_layout

\begin_layout Standard
gcc -D_REENTRANT thread1.c -lpthread 
\end_layout

\begin_layout Standard
Dans ce programme simple, on utilise trois fonctions de linuxThreads : 
\end_layout

\begin_layout Paragraph
pthread_create() 
\end_layout

\begin_layout Standard
- Cette fonction permet de créer et d'associer un thread à une fonction.
 Ici c'est la fonction d'affichage fonction_thread() qu'on a associé à chacun
 des threads .
 On peut aussi passer un argument de type void * (n'importe quel type) à
 la fonction 'threadée'.
 
\end_layout

\begin_layout Paragraph
pthread_join() 
\end_layout

\begin_layout Standard
- sert à un thread ou au programme principal à attendre la fin d'un thread.
 Le second argument de la fonction sera remplis avec la valeur de retour
 du thread.
 
\end_layout

\begin_layout Paragraph
pthread_exit() 
\end_layout

\begin_layout Standard
- permet de terminer l'exécution d'un thread et envoie une valeur de retour.
 
\end_layout

\begin_layout Standard
La fonction sleep() permet de mettre en évidence l'exécution parallèle des
 deux threads.
 Sinon, le premier thread aurait le temps de se terminer avant même que
 le second ne soit crée ...
 
\end_layout

\begin_layout Subsection
2.2 Gestion des données partagées 
\end_layout

\begin_layout Standard
On a vu précédemment que les données partagées devaient être protégées lorsqu'on
 y accédait afin d'éviter le problème de non-atomicité des opérations.
 La méthode la plus simple pour placer un verrou et ainsi protéger une donnée
 s'appelle Mutex.
 
\end_layout

\begin_layout Subsubsection
2.2.1 Les Mutex 
\end_layout

\begin_layout Standard
Mutex vient de MUTual EXclusion.
 Leur gestion est des des plus simple puisqu'elle consiste à utiliser deux
 fonctions : 
\end_layout

\begin_layout Paragraph
pthread_mutex_lock() 
\end_layout

\begin_layout Standard
- Pour placer le verrou.
 
\end_layout

\begin_layout Paragraph
pthread_mutex_unlock() 
\end_layout

\begin_layout Standard
- Pour le retirer.
 
\end_layout

\begin_layout Standard
Pour illustrer l'utilité des Mutex nous allons imaginer un programme construit
 comme suit : 
\end_layout

\begin_layout Itemize
un premier thread va remplir un tableau avec une fonction très lente qui
 met une demi-seconde pour remplir une seule case (nous simulons une fonction
 complexe qui effectue de nombreux calculs pour obtenir les valeurs qu'elle
 met dans les cases).
 
\end_layout

\begin_layout Itemize
un second thread va lire le contenu du tableau avec une fonction très rapide
 qui lit l'intégralité du tableau en moins d'une demi-seconde.
 
\end_layout

\begin_layout Standard
Sans utiliser de Mutex, le programme ressemblerait à ceci : 
\end_layout

\begin_layout LyX-Code
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "Threads/lp.c"

\end_inset


\end_layout

\begin_layout Standard
Et sa sortie ressemblerait à ceci : 
\end_layout

\begin_layout Standard
root@TAVARUA {}->./a.out                <(1:04:24)  
\end_layout

\begin_layout Standard
Thread ecriture: tab[0] vaut 0  
\end_layout

\begin_layout Standard
Thread lecture: tab[0] vaut 0  
\end_layout

\begin_layout Standard
Thread lecture: tab[1] vaut 0  
\end_layout

\begin_layout Standard
Thread lecture: tab[2] vaut 0  
\end_layout

\begin_layout Standard
Thread lecture: tab[3] vaut 0  
\end_layout

\begin_layout Standard
Thread lecture: tab[4] vaut 0  
\end_layout

\begin_layout Standard
Thread ecriture: tab[1] vaut 2  
\end_layout

\begin_layout Standard
Thread ecriture: tab[2] vaut 4  
\end_layout

\begin_layout Standard
Thread ecriture: tab[3] vaut 6  
\end_layout

\begin_layout Standard
Thread ecriture: tab[4] vaut 8 
\end_layout

\begin_layout Standard
Le thread de lecture lit donc toutes le cases avant que le thread d'écriture
 n'ait le temps d'écrire dans toutes les cases ...
 C'est assez génant.
 
\end_layout

\begin_layout Standard
Voyons maintenant le même programme utilisant un Mutex pour gérer ceci :
 
\end_layout

\begin_layout LyX-Code
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "Threads/lpc.c"

\end_inset


\end_layout

\begin_layout Standard
Désormais sa sortie est : 
\end_layout

\begin_layout Standard
root@TAVARUA {}->./a.out                <(1:12:55)  
\end_layout

\begin_layout Standard
Thread ecriture: tab[0] vaut 0  
\end_layout

\begin_layout Standard
Thread ecriture: tab[1] vaut 2  
\end_layout

\begin_layout Standard
Thread ecriture: tab[2] vaut 4  
\end_layout

\begin_layout Standard
Thread ecriture: tab[3] vaut 6  
\end_layout

\begin_layout Standard
Thread ecriture: tab[4] vaut 8  
\end_layout

\begin_layout Standard
Thread lecture: tab[0] vaut 0  
\end_layout

\begin_layout Standard
Thread lecture: tab[1] vaut 2  
\end_layout

\begin_layout Standard
Thread lecture: tab[2] vaut 4  
\end_layout

\begin_layout Standard
Thread lecture: tab[3] vaut 6  
\end_layout

\begin_layout Standard
Thread lecture: tab[4] vaut 8 
\end_layout

\begin_layout Standard
Lorsqu'un thread tente de placer un verrou sur un mutex, si celui-ci est
 déjà placé, le thread se bloque jusqu'a ce qu'il puisse le placer à son
 tour.
 Dans notre exemple, le premier thread à être lancé est celui qui écrit
 dans le le tableau, c'est donc lui qui place en premier le verrou et le
 second thread se retrouve bloqué lorsqu'il essaye de placer le verrou.
 
\end_layout

\begin_layout Standard
Les Mutex sont bien pratiques mais ils permettent juste de bloquer des threads
 en attendant une ressource, ils n'est pas possible de spécifier l'ordre
 dans lequel plusieurs threads peuvent accéder à celle-ci.
 Pour cela nous avons les fameux sémaphores ...
 
\end_layout

\begin_layout Subsubsection
2.2.2 Les sémaphores POSIX 
\end_layout

\begin_layout Standard
Vous vous souvenez des sémaphores System V qu'on avait brièvement présenté
 dans le cours IPC ? J'avais dit un truc du style : ``les sémaphores System
 V c'est pourrit donc on va pas se faire [bip] avec trop longtemps'' - enfin
 à peu près.
 Ca veut pas dire que le principe des sémaphore est mauvais, mais leur gestion
 à la norme System V est plus lente et gourmande en ressources que la version
 POSIX implémenté dans LinuxThreads.
 Les sémaphores sont purement et simplement des compteurs pour des ressources
 partagées par plusieurs threads.
 Le principe appliqué à la vie courante serait un grand magasin avec de
 nombreux clients et plusieurs caisses pour payer.
 Le nombre de caisses libres représente le compteur du sémaphore et les
 clients voulant payer représentent les thread souhaitant accéder à une
 ressource.
 Le compteur de sémaphore est positif temps qu'il reste des caisses libres
 et lorsqu'il est égal à 0, le client voulant payer doit attendre qu'une
 caisse se libère.
 
\end_layout

\begin_layout Standard
Pour accéder aux fonctions sur les sémaphores, il faut utiliser le fichier
 entête sémaphore.h en plus de pthread.h.
 
\end_layout

\begin_layout Paragraph
int sem_init(sem_t *sem, int pshared, unsigned int valeur); 
\end_layout

\begin_layout Standard
Initialise le sémaphore pointé par sem.
 Le compteur associé au sémaphore est initialisé à valeur.
 L'argument pshared indique si le sémaphore est local au processus courant
 (vaut 0) ou s'il est partagé entre les plusieurs processus (ce dernier
 comportement n'est pas encore géré par LinuxThreads).
 
\end_layout

\begin_layout Paragraph
int sem_wait(sem_t *sem); 
\end_layout

\begin_layout Standard
Suspend le thread appelant la fonction jusqu'a ce que le sémaphore pointé
 par sem ait une valeur non nulle.
 Lorsque le compteur devient non nul, le compteur du sémaphore est atomiquement
 décrémenté.
 
\end_layout

\begin_layout Paragraph
int sem_trywait(sem_t *sem); 
\end_layout

\begin_layout Standard
C'est une variante non bloquante de sem_wait().
 Si le sémaphore pointé par sem est non nul, le compteur est décrémenté
 atomiquement et la la fonction retourne 0.
 Si le compteur du sémaphore est à 0, la fonction retourne EAGAIN.
 
\end_layout

\begin_layout Paragraph
int sem_post(sem_t *sem); 
\end_layout

\begin_layout Standard
Incrémente atomiquement le compteur du sémaphore pointé par sem.
 Cette fonction n'est pas bloquante.
 
\end_layout

\begin_layout Paragraph
int sem_getvaleur(sen_t *sem, int *sval); 
\end_layout

\begin_layout Standard
Sauvegarde dans la variable pointée par sval la valeur courante du compteur
 du sémaphore sem.
 
\end_layout

\begin_layout Paragraph
int sem_destroy(sem_t *sem); 
\end_layout

\begin_layout Standard
Détruit un sémaphore et libère toutes les ressources qu'il possède.
 Dans LinuxThreads on ne peut pas associer de ressource à un sémaphore donc
 cette fonction ne fait que vérifier qu'aucun thread n'est bloqué sur le
 sémaphore.
 
\end_layout

\begin_layout Subsubsection
Variables de condition 
\end_layout

\begin_layout Standard
Les condition variables (condvar) permettent de réveiller un thread endormis
 en fonction de la valeur d'une variable.
 Par exemple, en reprenant le cas du magasin, on pourrait souhaiter qu'a
 une certaine heure, les caisses ferment et que les clients ne puissent
 plus payer.
 On pourrait gérer ceci uniquement avec des sémaphores mais les condvar
 vont nous faciliter la tache.
 
\end_layout

\begin_layout Standard
Attention ! Il faut toujours protéger la variables d'un condvar avec un
 mutex pour éviter les 'race conditions'.
 Une 'race condition' est le cas ou un thread se prépare à attendre une
 condition et un autre signale la condition juste avant que le premier n'attende
 réellement.
 Car dans ce cas, le thread qui se met en attente pourrait ne jamais être
 réveillé.
 
\end_layout

\begin_layout Paragraph
int pthread_cond_init(pthread_cond_t *cond, pthread_cond_attr_t *cond_attr);
 
\end_layout

\begin_layout Standard
Initialise une la condvar cond en utilisant les attributs de condition spécifiés
 par cond_attr ou les attributs par défaut si cond_attr vaut NULL.
 cond_attr est pour l'instant ignoré dans l'implémentation LinuxThreads.
 
\end_layout

\begin_layout Standard
Plus simplement, on peut initialiser les variables de type pthread_cond_t
 en utilisant la constante PTHREAD_COND_INITIALIZER.
 
\end_layout

\begin_layout Paragraph
int pthread_cond_signal(pthread_cond_t *cond); 
\end_layout

\begin_layout Standard
Permet de relancer un thread attendant la condition cond.
 S'il aucun thread n'attend, il ne se passe rien, si plusieurs threads attendent
 sur la même condition, un seul d'entre eux est réveillé mais il est impossible
 de prédire lequel.
 
\end_layout

\begin_layout Paragraph
int pthread_cond_broadcast(pthread_cond_t *cond); 
\end_layout

\begin_layout Standard
Relance tous les threads qui attendent la condition cond.
 
\end_layout

\begin_layout Paragraph
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex); 
\end_layout

\begin_layout Standard
Déverrouille le mutex et attend que la variable cond soit signalée.
 Le thread est endormis pendant ce temps.
 Le mutex doit être préalablement verrouillé par le thread .
 Lorsque la fonction rend la main, elle reverrouille le mutex.
 
\end_layout

\begin_layout Paragraph
int pthread_cond_timewait(pthread_cond_t *cond, pthread_mutex_t *mutex, const st
ruc timespec *abstime); 
\end_layout

\begin_layout Standard
Le comportement est le même que pour la fonction précédente mais elle s'effectue
 sur un laps de temps donné.
 
\end_layout

\begin_layout Paragraph
int pthread_cond_destroy(pthread_cond_t *cond); 
\end_layout

\begin_layout Standard
Détruit une variable de condition.
 Sous Linux, cette fonction ne fait que vérifier qu'aucun thread n'attend
 la condition.
 
\end_layout

\begin_layout Standard
soit l'exemple suivant:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "Threads/cond.c"

\end_inset


\end_layout

\begin_layout Paragraph
2.2.3.0.1 Note sur la gestion des signaux asynchrones : 
\end_layout

\begin_layout Standard
Il ne faut pas utiliser ces fonction dans un 'signal handler' car ces fonctions
 ne sont pas atomiques, cela peut placer un thread en position de deadlock
 (exclusion mutuelle avec lui-même).
 
\end_layout

\begin_layout Standard
Exemple : 
\end_layout

\begin_layout LyX-Code
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "Threads/sem.c"

\end_inset


\end_layout

\begin_layout Paragraph
2.2.3.0.2 Exercice : Créez un programme qui simule l'exemple précédement cité
 du grand magasin.
 
\end_layout

\begin_layout Standard
On doit simuler un magasin qui comporte 5 caisses et 20 clients voulant
 payer un article (une FNAC ?).
 
\end_layout

\begin_layout Standard
Chaque payement prend 5 minutes (c'est une FNAC...) que l'on représentera dans
 le programme par 1 seconde.
 
\end_layout

\begin_layout Standard
Le magasin ferme dans 15 minutes (6 secondes dans le programme), il faut
 que le programme donne le nombre de clients qui auront le temps de passer.
 
\end_layout

\begin_layout Standard
(Bon, c'est vrai, dans la réalité, ils feraient passer tout le monde ...
 mais faut bien trouver un exemple.
 On a qu'a dire que ce sont des guichets SNCF) 
\end_layout

\end_body
\end_document
