#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 0
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Les déscripteurs et les entrées sorties
\end_layout

\begin_layout Subsection
Ensemble de primitive d'initialisation et de destruction d'un descripteurs
\end_layout

\begin_layout Standard
chaque processus possède un ensemble de descripteur d'E/S ouvert, c'est
 la table de descripteurs de fichiers (fichier au sens large)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename desc.png
	width 60page%

\end_inset


\end_layout

\begin_layout Description
open, 
\end_layout

\begin_layout Description
voir pour les pipes qui sont un moyens de communications entre processus
\end_layout

\begin_layout Description
creat, socket, socketpair, dup, dup2
\end_layout

\begin_layout Description
close
\end_layout

\begin_layout Subsection
Entrées/Sortie sur descripteurs
\end_layout

\begin_layout Description
read
\end_layout

\begin_layout Description
write
\end_layout

\begin_layout Section
Les signaux 
\end_layout

\begin_layout Standard
Les signaux sont une forme de communication entre processus.
 Il sont utilisés pour rendre compte à un processus d'un événement ou d'une
 erreur.
 Il peuvent être générés à la suite d'un événement software (CTRL-C,violation
 de segment) ou hardware (erreur de bus,périphérique non prêt).
 Il existe différents signaux pré-définis par le système lui-même qui provoquent
 la terminaison du processus si celui-ci ne prends fait rien à la réception
 d'un tel signal.
 Les comportements par défaut des signaux sont les suivants: 
\end_layout

\begin_layout Itemize
Le signal est ignoré après avoir été reçu.
 
\end_layout

\begin_layout Itemize
Le processus est terminé après la réception.
 
\end_layout

\begin_layout Itemize
Un fichier core sera écrit puis le processus se terminera.
 
\end_layout

\begin_layout Itemize
Le processus se paralyse à la réception du signal.
 
\end_layout

\begin_layout Standard
La création d'un fichier core donnera toutes les informations nécessaires
 pour permettre d'étudier avec gdb le moment précis ou le processus à recu
 ce signal.
 Il y a 32 signaux définis, certains peuvent êtres interceptés et pris en
 charge par le processus d'autres ne peuvent être intercepté ni ignorés.
 L'ensemble des signaux définis par le système linux se trouvent dans /usr/inclu
de/bits/signum.h.
 
\end_layout

\begin_layout Standard
La fonction qui permet d'envoyer un signal à un processus est kill() est
 l'équivalent de la commande kill sous Unix : 
\end_layout

\begin_layout Description
int kill(pid_t pid, int sig) 
\end_layout

\begin_layout Standard
Si pid est positif, sig est envoyé au processus pid.
 
\end_layout

\begin_layout Standard
Si pid est nul, sig est envoyé à tous les processus appartenant au même
 groupe que le processus appelant.
 
\end_layout

\begin_layout Standard
Si pid vaut -1 le signal est envoyé à tous les processus sauf le premier
 (init).
 
\end_layout

\begin_layout Standard
Si pid est inférieur à -1 le signal est envoyé à tous les processus du groupe
 -pid.
 
\end_layout

\begin_layout Standard
La fonction renvoie 0 en cas de réussite, -1 en cas d'echec et la variable
 'errno' est mise à jour avec le code d'erreur.
 
\end_layout

\begin_layout Standard
Pour pouvoir gérer un certain signal, il faut lui créer un signal handler
 qui va l'intercepter et appeler une fonction préalablement définie.
 
\end_layout

\begin_layout Description
int (*signal(int sig, void (*func)()))() 
\end_layout

\begin_layout Standard
Prend en paramètre le signal sig et appelle la fonction pointée par func.
 
\end_layout

\begin_layout Standard
La valeur de retour est un pointeur sur func en cas de réussite ou -1 si
 une erreur est survenue.
 
\end_layout

\begin_layout Standard
func peut être un pointeur vers une fonction par défaut (SIG_DFL()) qui
 va terminer le processus ou un pointeur sur une fonction qui ignore le
 signal (SIG_IGN()) sauf si le signal est SIGKILL ou enfin un pointer sur
 une fonction définie par l'utilisateur.
 
\end_layout

\begin_layout Standard
Le fichier entêtes permettant d'accéder à ces fonctions est signal.h 
\end_layout

\begin_layout Standard
exercice 3: Créez un programme qui crée un processus fils entrant dans une
 boucle infinie et qui tue ce processus lorsqu'on tape "kill".
 (la création d'un processus sera vue au chapitre suivant) 
\end_layout

\begin_layout Standard
exercice 4: Créez un programme qui, lorsque l'utilisateur effectue un CTRL-C,
 affiche une phrase de mise en garde lui demandant de presser 'Entrée' pour
 continuer ou à nouveau CTRL-C pour quitter.
 
\end_layout

\end_body
\end_document
