  Introduction  RCS (Revision Control System)
  Frdric Couchet mad@bocal.cs.univ-paris8.fr
  APRIL http://www.april.org
  v 1.1, 23 septembre 1997

  Ce document prsente l'utilisation des outils RCS pour le contrle de
  version.
  ______________________________________________________________________

  Table of Contents


  1. Introduction
  2. Principe gnral
  3. Commandes de base
  4. Identification automatique
  5. Verrouillage (locking)
  6. L'arbre de rvision
  7. Autres commandes utiles
  8. Ce que ne fait pas RCS
  9. Emacs et RCS
  10. Copyright


  ______________________________________________________________________

  [1m1.  Introduction[0m

  Un problme majeur dans le dveloppement et la maintenance des
  programmes est le contrle de version. C'est--dire la conservation bien
  organise de tous les changements effectus sur les programmes dvelopps.
  Au final, un programme est constitu de diffrentes versions.

  L'un des programmes standard pour faire du contrle de version est
  GNU's [1mRCS[22m, qui signifie [4mRevision[24m [4mControl[24m [4mSystem[24m.

  RCS est un ensemble de commandes effectuant ce travail. Il automatise
  le stockage, la rcupration, la tenue d'un journal et l'identification
  des diffrentes rvisions de fichiers de diffrents types (texte de
  n'importe quel format, et mme binaire si les outils associs, tel que
  diff, peuvent grer ce type de fichiers). Cependant, la principale
  utilisation d'un systme de contrle de version s'inscrit dans le cadre
  de fichiers sources ou de documentations.

  RCS ne conserve pas une copie entire de chaque nouvelle version. Il
  stocke des [4mdeltas[24m, c'est  dire les diffrences entre les rvisions
  successives. Pour cela, les changements au fichier [4mfilename[24m sont
  conservs dans le fichier [4mfilename,v[24m.

  Parmi les principales caractristiques de RCS, on peut noter qu'il
  permet d'extraire une version antrieure des fichiers, de conserver des
  journaux des modifications apportes, de conserver l'identification des
  personnes ayant fait les modifications. RCS permet galement de
  comparer deux versions et fournit un mcanisme pour fusionner deux
  branches de dveloppement diffrentes d'un fichier. RCS permet galement
  le verrouillage ([4mlock[24m) d'un fichier, de telle faon qu'une seule
  personne puisse apporter des changements (les autres personnes peuvent
  toujours utiliser le fichier, par exemple pour le compiler).

  RCS a t principalement dvelopp par Walter F. Tichy et Paul Eggert. La
  version actuelle est la 5.7, elle est disponible sur
  ftp://prep.ai.mit.edu/pub/gnu/rcs-5.7.tar.gz ou sur
  ftp://ftp.ibp.fr/pub/gnu/rcs-5.7.tar.gz.  Nous verrons, sans toutefois
  entrer dans les dtails, le principe gnral du contrle de version, et
  les principales commandes constituant RCS.

  Notons qu'il existe d'autres outils de ce type.


  [1m2.  Principe gnral[0m

  La fonction principale de RCS est de grer des [4mgroupes[24m [4mde[24m [4mrvisions[24m. On
  peut dfinir une rvision comme un ensemble de textes appels rvisions,
  qui voluent les uns aprs les autres.

  Une nouvelle rvision est cre en ditant une rvision actuelle. La
  rvision initiale est la racine de l'arbre des rvisions. En effet, RCS
  organise les rvisions en un arbre ancestral. La rvision initiale de
  l'arbre (la racine) est normalement numrote 1.1 et les rvisions
  successives sont numrotes 1.2, 1.3, 1.4 ... Le premier champ du numro
  de rvision est appel le [4mrelease[24m [4mnumber[24m, et le second champ est appel
  le [4mlevel[24m [4mnumber[24m.

  RCS assigne un nouveau numro de rvision en incrmentant le [4mlevel[24m [4mnumber[0m
  de la rvision prcdente. Le [4mrelease[24m [4mnumber[24m doit tre incrment
  explicitement (uniquement dans le cas d'une transition majeure dans le
  dveloppement, par exemple lorsqu'une nouvelle release du produit a t
  complte).


  [1m3.  Commandes de base[0m

  L'interface de RCS est relativement simple et seulement deux commandes
  sont suffisantes dans la plupart des cas : ci et co.

  Nous supposons l'existence d'un fichier nomm foo.c.  Le source du
  fichier est le suivant :


       #include <stdio.h>

       main()
       {
         printf("Hello world\n");
       }



  Nous allons crer un nouveau groupe de rvisions avec foo.c comme
  rvision initiale (1.1). Le groupe sera stock dans le fichier nomm
  foo.c,v. Par dfaut, le fichier foo.c sera effac. Pour cela, nous
  utilisons la commande de [4mcheck-in[24m:



        ci foo.c



  Cette commande demande galement une description pour le groupe.



       foo.c,v <-- foo.c enter description, terminated with single '.' or end of file:
       NOTE: This is NOT the log message!
       >>



  Par exemple, nous tapons :



       >> programme hello world.
       >> .



  Le texte dcrit ce que le programme fait, et ci rappelle que ce n'est
  pas une entre dans le journal. Les commandes ci ultrieures demanderont
  une entre du journal, laquelle rsumera les modifications apportes. Ces
  messages doivent tre brefs, dcrivant les changements apports.

  Pour extraire la dernire rvision dans un groupe, on utilise la
  commande de [4mcheck-out[24m :



        co foo.c



  Le fichier foo.c est recr, mais en lecture seule. On peut utiliser le
  fichier pour le compiler par exemple. En effet, pour installer un
  logiciel, on extrait toutes les sources en lecture seule, on les
  compile et on efface les sources.

  Pour pouvoir modifier le fichier foo.c, nous devons utiliser l'option
  -l :



        co -l foo.c



  Cela permet d'extraire le fichier foo.c mais en posant un verrou sur
  le fichier. Cela signifie que vous, et vous seul, avez la permission
  de faire un [4mcheck-in[24m sur une nouvelle rvision du fichier (ce qui est
  ncessaire dans le cas o plusieurs personnes travaillent sur un mme
  groupe de rvisions). Le fichier foo.c en alors en criture pour vous.

  Le systme peut tre configur avec la caractristique du 'strict
  locking'. Tous les fichiers RCS sont initialiss de telle sorte que les
  oprations de [4mcheck-in[24m ncessitent un verrou sur la rvision prcdente.

  Pour dsactiver le [4mstrict[24m [4mlocking[24m sur un fichier individuel, utilisez
  la commande :



        rcs -U foo.c



  Pour activer le [4mstrict[24m [4mlocking[24m sur un fichier individuel, utilisez la
  commande :



   rcs -L foo.c



  La notion de [4mlocking[24m est aborde dans un chapitre ultrieur.

  Nous pouvons alors diter le fichier foo.c, et une fois les
  modifications effectues, en faire une nouvelle rvision par la
  commande:



        ci foo.c



  La commande nous demande alors le message du journal :



       foo.c,v <-- foo.c
       new revision: 1.2; previous revision: 1.1
       enter log message, terminated with single '.' or end of file:
       >> Affichage 10 fois du message
       >> .



  La nouvelle rvision est la 1.2.

  Si vous obtenez lors du ci, le message d'erreur suivant (en supposant
  que le login de l'utilisateur soit [4mmad[24m):



       ci error: no lock set by mad



  c'est que vous avez oubli de verrouiller la rvision lors du co.

  On peut noter, que pour des raisons pratiques, tous les fichiers RCS
  (*,v) peuvent tre dplacs dans un sous-rpertoire nomm RCS. Donc, prenez
  l'habitude de crer ce rpertoire avant de commencer  crer vos rvisions.
  RCS l'utilisera automatiquement.

  Si vous ne dsirez pas effacer le fichier de travail lors du [4mcheck-in[24m,
  vous devez utiliser soit l'option -l, qui entrane un [4mlocking[24m, soit
  l'option -u qui n'entrane pas de locking (ces options entranent un
  appel  la commande co):



       ci -l foo.c



  Les commandes ci et co sont les deux commandes de bases de RCS.



  [1m4.  Identification automatique[0m

  Avec RCS, vous pouvez marquer vos fichiers sources et objets par des
  chaines d'identification spciales. RCS utilise pour a la substitution
  de mots-cls. Par exemple, pour obtenir l'identification, placez le
  mot-cl suivant dans le texte d'une rvision (par exemple dans un
  commentaire en C): $Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $.

  La commande co remplacera ce mot-cl avec une chaine de la forme : $Id
  filename revisionnumber date time author state locker$. Cette chaine
  dcrit le nom du fichier, la rvision, la date et l'heure du [4mcheck-out[24m,
  l'auteur, l'tat (par exemple, [4mExp[24m pour exprimental) et celui qui
  verrouille le fichier. Cette chaine sera mise  jour automatiquement
  chaque fois.

  Pour obtenir la mme chose dans les fichiers objets, utilisez une
  chaine littrale de caractres, par exemple en C :


       static char rcsid[]="$Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $";



  Cette possibilit est trs importante pour la maintenance des
  programmes. Ainsi, la commande ident extrait ces mots-cls partir de
  n'importe quel fichier (donc les fichiers objets). Cela permet de
  retrouver quelles rvisions de quels modules ont t utilises pour
  construire le programme.

  Il existe d'autres mots-cls d'identification ($Author: pfares $, $Date: 2003/01/23 23:45:42 $,
  $Header: /usr/local/cvsroot/MPS/rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $, $Locker:  $ ,$Name:  $ ,$RCSfile: rcs.txt,v $, $Revision: 1.1.1.1 $, $Source: /usr/local/cvsroot/MPS/rcs.txt,v $, $State: Exp $,
  voir la page de manuel de co). Un mot-cl important est $Log: rcs.txt,v $
  voir la page de manuel de co). Un mot-cl important est Revision 1.1.1.1  2003/01/23 23:45:42  pfares
  voir la page de manuel de co). Un mot-cl important est pportable
  voir la page de manuel de co). Un mot-cl important est. Son
  fonctionnement est un peu diffrent, il permet d'accumuler les messages
  du journal saisis lors du processus de [4mcheck-in[24m. On utilise ce mot-cl
  dans un commentaire en dbut de fichier source. Ainsi le fichier source
  est auto-document.

  Prenons un exemple concret, voil le dbut du fichier foo.c lors de sa
  cration :


       /*
        * $Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $
        *
        * $Log: rcs.txt,v $
        * Revision 1.1.1.1  2003/01/23 23:45:42  pfares
        * pportable
        *
        *
        */

       static char rcsid[] = "$Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $";



  Lorsque nous extrayons la rvision 1.2, nous obtenons en dbut du
  fichier foo.c :



  /*
   * $Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $
   *
   * $Log: rcs.txt,v $
   * Revision 1.1.1.1  2003/01/23 23:45:42  pfares
   * pportable
   *
   * Revision 1.2  1997/08/23 20:33:36  mad
   * Affichage 10 fois du message
   *
   * Revision 1.1  1997/08/23 20:33:05  mad
   * Initial revision
   *
   *
   */

  static char rcsid[] = "$Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $";



  Si nous compilons foo.c pour obtenir a.out, et que nous utilisons la
  commande :


       ident a.out



  nous obtenons :


       a.out: $Id: rcs.txt,v 1.1.1.1 2003/01/23 23:45:42 pfares Exp $



  Ce qui nous permet de savoir que le fichier a.out a t obtenu  partir
  de la rvision 1.2 de foo.c.


  [1m5.  Verrouillage ( locking )[0m

  Le problme pos est le suivant : au moins deux personnes veulent dposer
  des modifications d'une mme rvision. Si nous supposons deux
  programmeurs apportant des modifications  une mme rvision (par exemple
  la 2.5). Le programmeur A fait un ci sur sa rvision avant le
  programmeur B. Le programmeur B n'a pas vu les modifications de A,
  donc l'effet est que les changements de A sont couverts par les
  modifications de B.

  RCS prvient ce conflit par le verrouillage. Lorsque quelqu'un veut
  diter une rvision pour la modifier, la rvision doit tre extraite et
  verrouille, en utilisant l'option -l de co. La prochaine opration de
  [4mcheck-in[24m effacera le verrou. Au plus un programmeur  la fois peut
  verrouiller une rvision, et seulement ce programmeur peut la
  dverrouiller.

  Par exemple, supposons que le programmeur mad a mis un verrou par la
  commande co -l foo.c. Maintenant, si le programmeur gunsman veut
  extraire la rvision pour la modifier par la mme commande, il aura le
  message d'erreur suivant :


       foo.c,v --> foo.c co: foo.c,v: Revision 1.2 is already locked by mad.



  De plus, chaque fichier RCS possde galement une liste d'accs, qui
  spcifie quels utilisateurs peuvent effectuer des oprations de mise
  jour.


  [1m6.  L'arbre de rvision[0m

  Nous avons vu que les numros de rvisions dmarraient  1.1 et,
  qu'ensuite, la commande ci incrmentait uniquement le [4mlevel[24m [4mnumber[24m.
  Pour incrmenter le [4mrelease[24m [4mnumber[24m il faut le faire explicitement avec
  l'option -r de ci, par exemple :


       ci -r2.1 foo.c



  assigne le numro 2.1  la nouvelle rvision. Un nouveau [4mcheck-in[24m donnera
  ensuite 2.2.

  Un arbre de rvision est constitu normalement d'une branche unique
  appele tronc. On peut nanmoins crer des branches latrales. Par
  exemple, supposons l'arbre de rvision suivant :


       1.1 -> 1.2 -> 1.3 -> 1.4 -> 2.1 -> 2.2 -> 2.3 ...



  Cet arbre a 7 rvisions groupes en 2 [4mreleases[24m. La release 1.4 est en
  activit sur un site client, tandis que la [4mrelease[24m 2 est en
  dveloppement.

  Imaginons maintenant que le client demande une correction dans la
  rvision 1.4. Nous allons alors crer une branche  la rvision 1.4, et
  insrer les corrections sur cette branche. La premire branche dmarrant
  1.4 est numrote 1.4.1 et les rvisions sur cette branche sont numrotes
  1.4.1.1, 1.4.1.2, 1.4.1.3 ... Cette notation permet de crer d'autres
  branches  partir de 1.4. Les tapes ncessaires sont les suivantes :



       co -r1.4 foo.c
       editer foo.c pour apporter les corrections
       ci -r1.4.1 foo.c



  Nous obtenons alors l'arbre suivant :


       1.1 -> 1.2 -> 1.3 -> 1.4 -> 2.1 -> 2.2 -> 2.3 ...
                              \
                               \
                                \> 1.4.1.1 -> ...



  Il peut tre ncessaire d'incorporer les diffrences entre 1.4 et 1.4.1.1
  dans une rvision de la release 2. Pour cela, il faut utiliser la
  commande rcsmerge qui automatise le processus.

  Une autre raison de crer une branche est lie au problme pos par un
  programmeur ayant verrouill une rvision pour la modifier et qui n'a
  pas encore effectu le dpt de ses modifications. Si un autre
  programmeur dsire modifier cette rvision, il ne peut pas le faire tant
  que le verrou n'est pas supprim. La solution est de crer une branche,
  et ensuite, une fois que le premier programmeur a effectu son [4mcheck-[0m
  [4min[24m, utiliser la commande rcsmerge pour incorporer les deux rvisions.


  [1m7.  Autres commandes utiles[0m

  La commande [4mrcsdiff[24m permet de comparer la version actuelle avec la
  plus rcente version qui est sauvegarde :


       rcsdiff -u foo.c



  L'option -u de rcsdiff permet d'utiliser un diff unifi ([4munified[24m [4mdiff[24m).
  En fait, rcsdiff accepte toutes les options que la commande diff
  accepte. Par exemple, pour gnrer un [4mcontext[24m [4mdiff[24m, on utilisera
  l'option -c.

  Par exemple, nous extrayons la rvision 1.2 de foo.c, nous effectuons
  une petite modification (correction d'un bug), et rcsdiff foo.c nous
  donne:


       ===================================================================
       RCS file: foo.c,v
       retrieving revision 1.2
       diff -u -r1.2 foo.c
       --- foo.c       1997/08/23 20:33:36     1.2
       +++ foo.c       1997/08/24 20:36:20
       @@ -24,7 +24,7 @@
        main()
        {
            int i = 0;
       -    for(i = 0; i <= 10; i++)
       +    for(i = 0; i < 10; i++)
               printf("Hello world\n");

        }



  Les lignes qui n'ont pas t modifies sont affiches avec une simple
  espace en dbut de ligne. Les lignes effaces dans la version la plus
  rcente ont un - en dbut de ligne, et les lignes qui ont t ajoutes ont
  un + en dbut de ligne. Comme on peut le remarquer, les lignes modifies
  sont considres comme effaces dans l'ancienne version, et les
  changements sont considrs comme ajouts dans la nouvelle. Dans le cas
  d'un [4mcontext[24m [4mdiff[24m, les lignes marques avec un ! indiquent un
  changement, et les lignes marques avec un + indiquent des lignes
  ajoutes.

  On peut galement comparer deux versions :


       rcsdiff -u -r1.2 -r1.4 foo.c



  Une utilisation de rcsdiff est la gnration de mises  jour appliques
  par des [4mpatch[24m. Par exemple, une fois un programme termin, effectuez un
  [4mcheck-in[24m sur tous les fichiers avec un nouveau numro de release, par
  exemple 2.0. Puis, pour la release suivante (par exemple la 3.0),
  lancez rcsdiff sur la rvision 2.0 pour tous les fichiers :


       rcsdiff -c -r2.0 RCS/* > monprog-3.0.patch 2>&1



  Vous obtiendrez ainsi un fichier [4mpatch[24m que vous pourrez distribuer aux
  personnes possdant la version 2.0.

  Une autre possibilit intressante est de consulter le journal des
  modifications effectues. Pour cela on utilise la commande rlog, qui
  donne l'historique des changements effectus :



       rlog foo.c



  Ce qui nous donne :



       RCS file: foo.c,v
       Working file: foo.c
       head: 1.3
       branch:
       locks: strict
               mad: 1.3
       access list:
       symbolic names:
       keyword substitution: kv
       total revisions: 3; selected revisions: 3
       description:
       programme hello world
       ----------------------------
       revision 1.3
       date: 1997/08/23 20:36:20;  author: mad;  state: Exp;  lines: +6 -1
       Correction d'un petit bug
       ----------------------------
       revision 1.2
       date: 1997/08/23 20:33:36;  author: mad;  state: Exp;  lines: +8 -3
       Affichage 10 fois du message
       ----------------------------
       revision 1.1
       date: 1997/08/23 20:33:05;  author: mad;  state: Exp;
       Initial revision
       =============================================================================



  Le plus intressant ce sont les commentaires saisis lors d'un ci. Par
  exemple, on peut noter que pour la rvision 1.3, le commentaire est
  [4mCorrection[24m [4md'un[24m [4mpetit[24m [4mbug[24m.

  A noter que les dates et heures sont en UTC, et non pas dans la zone
  locale. Cela permet  des dveloppeurs de diffrentes zones gographiques
  de pouvoir collaborer.
  La commande rcs est utilise pour modifier l'tat des fichiers RCS. Par
  exemple, pour bloquer un fichier qui ne l'est pas ou pour casser un
  verrou.


  [1m8.  Ce que ne fait pas RCS[0m

  Une des choses que RCS ne permet pas de grer est la modification
  simultane de mmes fichiers par plusieurs utilisateurs. Un autre outil
  est disponible pour effectuer ce travail, c'est CVS ([4mConcurrent[0m
  [4mVersion[24m [4mSystem[24m). CVS, qui est bas sur RCS, permet galement le
  management des diffrents release d'un logiciel.

  CVS est disponible sur ftp://prep.ai.mit.edu/pub/gnu/cvs-1.6.tar.gz ou
  sur ftp://ftp.ibp.fr/pub/gnu/cvs-1.6.tar.gz.


  [1m9.  Emacs et RCS[0m

  L'diteur GNU Emacs est capable de reconnatre automatiquement un
  fichier gr par RCS lorsque vous l'ditez. Emacs fournit alors une
  interface aux commandes de contrle de version. Vous n'avez donc qu'
  apprendre seulement quelques commandes (la plupart dbutent par "C-x
  v") pour faire du contrle de version, ou alors utiliser le menu [4mTools[24m,
  puis le sous-menu [4mVersion[24m [4mControl[24m. Le manuel Emacs contient de la
  documentation dans le noeud [4mversion[24m [4mcontrol[24m.


  [1m10.  Copyright[0m

  Copyright (c) 1997 Frederic Couchet, association APRIL.

  Ce document peut etre reproduit et distribue dans son integralite ou
  partiellement, par quelque moyen physique que ce soit.  Il reste
  malgre tout sujet aux conditions suivantes :


  +o  La mention du copyright doit etre conservee, et la presente section
     preservee dans son integralite sur toute copie integrale ou
     partielle.

  +o  Si vous distribuez ce travail en partie, vous devez mentionnez
     comment obtenir une version integrale de ce document et etre en
     mesure de la fournir.

  +o  De petites portions de ce document peuvent etre utilisees comme
     illustrations d'une presentation ou comme remarques sans
     autorisation prealable si les citations d'usage sont realisees.



